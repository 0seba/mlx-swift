
// Copyright Â© 2024 Apple Inc.

import Foundation
import MLX
import MLXRandom
import MLXNN
@testable import MLXOptimizers
import XCTest

/// Integration tests comparing results vs known results from python
/// integration.  Generated by `tools/generate_integration_tests.py`.
///
/// Note: this is not meant to be complete coverage, merely a sanity
/// check that the wrapping of the c++ core matches python (e.g. calls
/// the same functions).
class MLXIntegrationTests: XCTestCase {

    func testAddOp() {
        MLXRandom.seed(864)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.32840442657470703,
            accuracy: 0.006568088531494141)
        XCTAssertEqual(a.sum().item(Float.self), 3.9408528804779053,
            accuracy: 0.07881705760955811)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.38708561658859253,
            accuracy: -0.007741712331771851)
        XCTAssertEqual(b.sum().item(Float.self), -4.645027160644531,
            accuracy: -0.09290054321289062)
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.05868121236562729,
            accuracy: -0.0011736242473125457)
        XCTAssertEqual(result.sum().item(Float.self), -0.7041745185852051,
            accuracy: -0.014083490371704102)
    }

    func testAddOp1() {
        MLXRandom.seed(394)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.17949937283992767,
            accuracy: -0.0035899874567985536)
        XCTAssertEqual(b.sum().item(Float.self), -2.1539924144744873,
            accuracy: -0.04307984828948975)
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3205006718635559,
            accuracy: 0.006410013437271119)
        XCTAssertEqual(result.sum().item(Float.self), 3.846008062362671,
            accuracy: 0.07692016124725341)
    }

    func testAddOp2() {
        MLXRandom.seed(776)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.1590166687965393,
            accuracy: 0.003180333375930786)
        XCTAssertEqual(a.sum().item(Float.self), 1.9082000255584717,
            accuracy: 0.03816400051116944)
        let b = 1.3
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.4590167999267578,
            accuracy: 0.029180335998535156)
        XCTAssertEqual(result.sum().item(Float.self), 17.508201599121094,
            accuracy: 0.3501640319824219)
    }

    func testSubOp() {
        MLXRandom.seed(911)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.523838222026825,
            accuracy: 0.0104767644405365)
        XCTAssertEqual(a.sum().item(Float.self), 6.28605842590332,
            accuracy: 0.12572116851806642)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.28246065974235535,
            accuracy: 0.005649213194847107)
        XCTAssertEqual(b.sum().item(Float.self), 3.3895277976989746,
            accuracy: 0.0677905559539795)
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.24137762188911438,
            accuracy: 0.0048275524377822876)
        XCTAssertEqual(result.sum().item(Float.self), 2.896531343460083,
            accuracy: 0.05793062686920166)
    }

    func testSubOp1() {
        MLXRandom.seed(430)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.05095359683036804,
            accuracy: 0.0010190719366073608)
        XCTAssertEqual(b.sum().item(Float.self), 0.6114431619644165,
            accuracy: 0.01222886323928833)
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.44904646277427673,
            accuracy: 0.008980929255485534)
        XCTAssertEqual(result.sum().item(Float.self), 5.388557434082031,
            accuracy: 0.10777114868164063)
    }

    func testSubOp2() {
        MLXRandom.seed(41)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.27060821652412415,
            accuracy: -0.005412164330482483)
        XCTAssertEqual(a.sum().item(Float.self), -3.2472984790802,
            accuracy: -0.06494596958160401)
        let b = 1.3
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -1.570608139038086,
            accuracy: -0.03141216278076172)
        XCTAssertEqual(result.sum().item(Float.self), -18.84729766845703,
            accuracy: -0.3769459533691406)
    }

    func testMulOp() {
        MLXRandom.seed(265)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.18188762664794922,
            accuracy: 0.0036377525329589844)
        XCTAssertEqual(a.sum().item(Float.self), 2.1826515197753906,
            accuracy: 0.043653030395507816)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.6280676126480103,
            accuracy: 0.012561352252960206)
        XCTAssertEqual(b.sum().item(Float.self), 7.536810874938965,
            accuracy: 0.1507362174987793)
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.3994637131690979,
            accuracy: -0.007989274263381958)
        XCTAssertEqual(result.sum().item(Float.self), -4.793564319610596,
            accuracy: -0.09587128639221192)
    }

    func testMulOp1() {
        MLXRandom.seed(988)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.03418738767504692,
            accuracy: 0.0006837477535009385)
        XCTAssertEqual(b.sum().item(Float.self), 0.41024863719940186,
            accuracy: 0.008204972743988037)
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.01709369383752346,
            accuracy: 0.00034187387675046923)
        XCTAssertEqual(result.sum().item(Float.self), 0.20512431859970093,
            accuracy: 0.004102486371994019)
    }

    func testMulOp2() {
        MLXRandom.seed(523)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.112852081656456,
            accuracy: 0.00225704163312912)
        XCTAssertEqual(a.sum().item(Float.self), 1.3542249202728271,
            accuracy: 0.027084498405456542)
        let b = 1.3
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.1467076987028122,
            accuracy: 0.0029341539740562438)
        XCTAssertEqual(result.sum().item(Float.self), 1.7604923248291016,
            accuracy: 0.035209846496582035)
    }

    func testDivOp() {
        MLXRandom.seed(497)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.24078607559204102,
            accuracy: -0.004815721511840821)
        XCTAssertEqual(a.sum().item(Float.self), -2.889432907104492,
            accuracy: -0.057788658142089847)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.06469622254371643,
            accuracy: 0.0012939244508743287)
        XCTAssertEqual(b.sum().item(Float.self), 0.7763546705245972,
            accuracy: 0.015527093410491943)
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -2.3975558280944824,
            accuracy: -0.04795111656188965)
        XCTAssertEqual(result.sum().item(Float.self), -28.77066993713379,
            accuracy: -0.5754133987426758)
    }

    func testDivOp1() {
        MLXRandom.seed(414)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.12723450362682343,
            accuracy: -0.0025446900725364686)
        XCTAssertEqual(b.sum().item(Float.self), -1.5268139839172363,
            accuracy: -0.030536279678344727)
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -1.0689575672149658,
            accuracy: -0.021379151344299317)
        XCTAssertEqual(result.sum().item(Float.self), -12.827489852905273,
            accuracy: -0.2565497970581055)
    }

    func testDivOp2() {
        MLXRandom.seed(940)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3181919455528259,
            accuracy: -0.0063638389110565186)
        XCTAssertEqual(a.sum().item(Float.self), -3.818303346633911,
            accuracy: -0.07636606693267822)
        let b = 1.3
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.2447631061077118,
            accuracy: -0.0048952621221542356)
        XCTAssertEqual(result.sum().item(Float.self), -2.937157154083252,
            accuracy: -0.05874314308166504)
    }

    func testModOp() {
        MLXRandom.seed(802)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.08001989126205444,
            accuracy: 0.001600397825241089)
        XCTAssertEqual(a.sum().item(Float.self), 0.9602386951446533,
            accuracy: 0.019204773902893067)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.6472575068473816,
            accuracy: -0.012945150136947633)
        XCTAssertEqual(b.sum().item(Float.self), -7.76708984375,
            accuracy: -0.155341796875)
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.08125662803649902,
            accuracy: 0.0016251325607299805)
        XCTAssertEqual(result.sum().item(Float.self), 0.9750795364379883,
            accuracy: 0.019501590728759767)
    }

    func testModOp1() {
        MLXRandom.seed(849)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.5959362983703613,
            accuracy: -0.011918725967407227)
        XCTAssertEqual(b.sum().item(Float.self), -7.151235103607178,
            accuracy: -0.14302470207214354)
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3303334414958954,
            accuracy: 0.006606668829917908)
        XCTAssertEqual(result.sum().item(Float.self), 3.964001178741455,
            accuracy: 0.0792800235748291)
    }

    func testModOp2() {
        MLXRandom.seed(310)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.15466859936714172,
            accuracy: 0.0030933719873428344)
        XCTAssertEqual(a.sum().item(Float.self), 1.8560230731964111,
            accuracy: 0.03712046146392822)
        let b = 1.3
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.04633527621626854,
            accuracy: 0.0009267055243253708)
        XCTAssertEqual(result.sum().item(Float.self), 0.5560232996940613,
            accuracy: 0.011120465993881225)
    }

    func testPowOp() {
        MLXRandom.seed(991)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.9301013946533203,
            accuracy: 0.018602027893066406)
        XCTAssertEqual(a.sum().item(Float.self), 11.161216735839844,
            accuracy: 0.22322433471679687)
        let b = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.8905618190765381,
            accuracy: 0.017811236381530763)
        XCTAssertEqual(b.sum().item(Float.self), 10.686741828918457,
            accuracy: 0.21373483657836914)
        let result = a ** b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7599539756774902,
            accuracy: 0.015199079513549806)
        XCTAssertEqual(result.sum().item(Float.self), 9.119447708129883,
            accuracy: 0.18238895416259765)
    }

    func testPowOp1() {
        MLXRandom.seed(488)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.8261654376983643,
            accuracy: 0.016523308753967285)
        XCTAssertEqual(a.sum().item(Float.self), 9.913985252380371,
            accuracy: 0.19827970504760742)
        let b = 1.3
        let result = a ** b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.8316802978515625,
            accuracy: 0.01663360595703125)
        XCTAssertEqual(result.sum().item(Float.self), 9.98016357421875,
            accuracy: 0.199603271484375)
    }

    func testEqualOp() {
        MLXRandom.seed(366)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.18560372292995453,
            accuracy: -0.0037120744585990907)
        XCTAssertEqual(a.sum().item(Float.self), -2.2272446155548096,
            accuracy: -0.04454489231109619)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.14294207096099854,
            accuracy: -0.002858841419219971)
        XCTAssertEqual(b.sum().item(Float.self), -1.7153047323226929,
            accuracy: -0.03430609464645386)
        let result = a .== b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testEqualOp1() {
        MLXRandom.seed(597)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.268618643283844,
            accuracy: -0.00537237286567688)
        XCTAssertEqual(a.sum().item(Float.self), -3.223423480987549,
            accuracy: -0.06446846961975097)
        let b = 1.3
        let result = a .== b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testNotEqualOp() {
        MLXRandom.seed(913)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.040915559977293015,
            accuracy: 0.0008183111995458603)
        XCTAssertEqual(a.sum().item(Float.self), 0.490986704826355,
            accuracy: 0.0098197340965271)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.7076951265335083,
            accuracy: -0.014153902530670167)
        XCTAssertEqual(b.sum().item(Float.self), -8.492341041564941,
            accuracy: -0.16984682083129884)
        let result = a .!= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testNotEqualOp1() {
        MLXRandom.seed(929)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.2947184443473816,
            accuracy: -0.005894368886947632)
        XCTAssertEqual(a.sum().item(Float.self), -3.536621332168579,
            accuracy: -0.07073242664337158)
        let b = 1.3
        let result = a .!= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanOp() {
        MLXRandom.seed(223)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.009602058678865433,
            accuracy: -0.00019204117357730867)
        XCTAssertEqual(a.sum().item(Float.self), -0.11522470414638519,
            accuracy: -0.002304494082927704)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.00826784037053585,
            accuracy: 0.000165356807410717)
        XCTAssertEqual(b.sum().item(Float.self), 0.09921407699584961,
            accuracy: 0.0019842815399169923)
        let result = a .< b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanOp1() {
        MLXRandom.seed(516)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.671758770942688,
            accuracy: 0.01343517541885376)
        XCTAssertEqual(a.sum().item(Float.self), 8.061104774475098,
            accuracy: 0.16122209548950195)
        let b = 1.3
        let result = a .< b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanEqualOp() {
        MLXRandom.seed(142)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.21625718474388123,
            accuracy: 0.004325143694877624)
        XCTAssertEqual(a.sum().item(Float.self), 2.595086097717285,
            accuracy: 0.051901721954345705)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.3831753134727478,
            accuracy: -0.007663506269454956)
        XCTAssertEqual(b.sum().item(Float.self), -4.5981035232543945,
            accuracy: -0.09196207046508789)
        let result = a .<= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanEqualOp1() {
        MLXRandom.seed(288)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.19039803743362427,
            accuracy: -0.0038079607486724855)
        XCTAssertEqual(a.sum().item(Float.self), -2.284776449203491,
            accuracy: -0.045695528984069825)
        let b = 1.3
        let result = a .<= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanOp() {
        MLXRandom.seed(143)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.025643646717071533,
            accuracy: -0.0005128729343414307)
        XCTAssertEqual(a.sum().item(Float.self), -0.3077237606048584,
            accuracy: -0.006154475212097168)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.5313312411308289,
            accuracy: -0.010626624822616577)
        XCTAssertEqual(b.sum().item(Float.self), -6.375974655151367,
            accuracy: -0.12751949310302735)
        let result = a .> b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanOp1() {
        MLXRandom.seed(773)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.18657740950584412,
            accuracy: -0.003731548190116882)
        XCTAssertEqual(a.sum().item(Float.self), -2.23892879486084,
            accuracy: -0.044778575897216795)
        let b = 1.3
        let result = a .> b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanEqualOp() {
        MLXRandom.seed(97)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.04777970910072327,
            accuracy: -0.0009555941820144654)
        XCTAssertEqual(a.sum().item(Float.self), -0.5733565092086792,
            accuracy: -0.011467130184173583)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.02195758745074272,
            accuracy: -0.00043915174901485446)
        XCTAssertEqual(b.sum().item(Float.self), -0.26349103450775146,
            accuracy: -0.005269820690155029)
        let result = a .>= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanEqualOp1() {
        MLXRandom.seed(633)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.17345473170280457,
            accuracy: 0.0034690946340560913)
        XCTAssertEqual(a.sum().item(Float.self), 2.0814566612243652,
            accuracy: 0.0416291332244873)
        let b = 1.3
        let result = a .>= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAbs() {
        MLXRandom.seed(818)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.01743374764919281,
            accuracy: -0.0003486749529838562)
        XCTAssertEqual(a.sum().item(Float.self), -0.20920497179031372,
            accuracy: -0.004184099435806275)
        let result = a.abs()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.829867959022522,
            accuracy: 0.01659735918045044)
        XCTAssertEqual(result.sum().item(Float.self), 9.958415031433105,
            accuracy: 0.19916830062866211)
    }

    func testAbs1() {
        MLXRandom.seed(256)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.15743832290172577,
            accuracy: -0.0031487664580345156)
        XCTAssertEqual(a.sum().item(Float.self), -1.8892598152160645,
            accuracy: -0.03778519630432129)
        let result = abs(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.8130466341972351,
            accuracy: 0.0162609326839447)
        XCTAssertEqual(result.sum().item(Float.self), 9.756559371948242,
            accuracy: 0.19513118743896485)
    }

    func testAll() {
        MLXRandom.seed(931)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.22450898587703705,
            accuracy: -0.004490179717540741)
        XCTAssertEqual(a.sum().item(Float.self), -2.6941077709198,
            accuracy: -0.053882155418396)
        let result = a.all()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll1() {
        MLXRandom.seed(545)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.05837365239858627,
            accuracy: 0.0011674730479717256)
        XCTAssertEqual(a.sum().item(Float.self), 0.7004837989807129,
            accuracy: 0.014009675979614259)
        let result = all(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll2() {
        MLXRandom.seed(722)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.01978858932852745,
            accuracy: -0.00039577178657054904)
        XCTAssertEqual(a.sum().item(Float.self), -0.2374630719423294,
            accuracy: -0.004749261438846588)
        let result = a.all(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll3() {
        MLXRandom.seed(829)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.03525291010737419,
            accuracy: 0.0007050582021474838)
        XCTAssertEqual(a.sum().item(Float.self), 0.4230349063873291,
            accuracy: 0.008460698127746582)
        let result = all(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll4() {
        MLXRandom.seed(616)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49660220742225647,
            accuracy: 0.00993204414844513)
        XCTAssertEqual(a.sum().item(Float.self), 35.7553596496582,
            accuracy: 0.715107192993164)
        let result = a.all(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll5() {
        MLXRandom.seed(923)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4720103442668915,
            accuracy: 0.00944020688533783)
        XCTAssertEqual(a.sum().item(Float.self), 33.984745025634766,
            accuracy: 0.6796949005126953)
        let result = all(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny() {
        MLXRandom.seed(150)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.02183736488223076,
            accuracy: -0.0004367472976446152)
        XCTAssertEqual(a.sum().item(Float.self), -0.2620483636856079,
            accuracy: -0.005240967273712158)
        let result = a.any()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny1() {
        MLXRandom.seed(317)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.1289883852005005,
            accuracy: -0.0025797677040100097)
        XCTAssertEqual(a.sum().item(Float.self), -1.5478605031967163,
            accuracy: -0.030957210063934325)
        let result = any(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny2() {
        MLXRandom.seed(101)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.08150328695774078,
            accuracy: -0.0016300657391548157)
        XCTAssertEqual(a.sum().item(Float.self), -0.9780394434928894,
            accuracy: -0.01956078886985779)
        let result = a.any(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny3() {
        MLXRandom.seed(747)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.23745165765285492,
            accuracy: 0.004749033153057099)
        XCTAssertEqual(a.sum().item(Float.self), 2.8494198322296143,
            accuracy: 0.056988396644592286)
        let result = any(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny4() {
        MLXRandom.seed(75)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.48318418860435486,
            accuracy: 0.009663683772087097)
        XCTAssertEqual(a.sum().item(Float.self), 34.78926086425781,
            accuracy: 0.6957852172851563)
        let result = a.any(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny5() {
        MLXRandom.seed(920)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.41749411821365356,
            accuracy: 0.008349882364273071)
        XCTAssertEqual(a.sum().item(Float.self), 30.0595760345459,
            accuracy: 0.601191520690918)
        let result = any(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testArgMax() {
        MLXRandom.seed(870)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.32090985774993896,
            accuracy: 0.006418197154998779)
        XCTAssertEqual(a.sum().item(Float.self), 3.8509180545806885,
            accuracy: 0.07701836109161377)
        let result = a.argMax()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 4.0,
            accuracy: 0.08)
        XCTAssertEqual(result.sum().item(Float.self), 4,
            accuracy: 0.08)
    }

    func testArgMax1() {
        MLXRandom.seed(700)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.20903855562210083,
            accuracy: -0.004180771112442016)
        XCTAssertEqual(a.sum().item(Float.self), -2.50846266746521,
            accuracy: -0.0501692533493042)
        let result = argMax(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 8.0,
            accuracy: 0.16)
        XCTAssertEqual(result.sum().item(Float.self), 8,
            accuracy: 0.16)
    }

    func testArgMax2() {
        MLXRandom.seed(338)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.07185819745063782,
            accuracy: 0.0014371639490127564)
        XCTAssertEqual(a.sum().item(Float.self), 0.8622983694076538,
            accuracy: 0.017245967388153077)
        let result = a.argMax(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 1.25,
            accuracy: 0.025)
        XCTAssertEqual(result.sum().item(Float.self), 5,
            accuracy: 0.1)
    }

    func testArgMax3() {
        MLXRandom.seed(483)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.0843842476606369,
            accuracy: 0.001687684953212738)
        XCTAssertEqual(a.sum().item(Float.self), 1.012610912322998,
            accuracy: 0.020252218246459962)
        let result = argMax(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 0.75,
            accuracy: 0.015)
        XCTAssertEqual(result.sum().item(Float.self), 3,
            accuracy: 0.06)
    }

    func testArgMin() {
        MLXRandom.seed(573)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5405035018920898,
            accuracy: 0.010810070037841797)
        XCTAssertEqual(a.sum().item(Float.self), 6.48604154586792,
            accuracy: 0.1297208309173584)
        let result = a.argMin()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 8.0,
            accuracy: 0.16)
        XCTAssertEqual(result.sum().item(Float.self), 8,
            accuracy: 0.16)
    }

    func testArgMin1() {
        MLXRandom.seed(103)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.2983229458332062,
            accuracy: 0.005966458916664124)
        XCTAssertEqual(a.sum().item(Float.self), 3.5798752307891846,
            accuracy: 0.0715975046157837)
        let result = argMin(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 11.0,
            accuracy: 0.22)
        XCTAssertEqual(result.sum().item(Float.self), 11,
            accuracy: 0.22)
    }

    func testArgMin2() {
        MLXRandom.seed(362)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.057320237159729004,
            accuracy: -0.00114640474319458)
        XCTAssertEqual(a.sum().item(Float.self), -0.687842845916748,
            accuracy: -0.013756856918334961)
        let result = a.argMin(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 1.0,
            accuracy: 0.02)
        XCTAssertEqual(result.sum().item(Float.self), 4,
            accuracy: 0.08)
    }

    func testArgMin3() {
        MLXRandom.seed(444)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.22760924696922302,
            accuracy: 0.004552184939384461)
        XCTAssertEqual(a.sum().item(Float.self), 2.7313108444213867,
            accuracy: 0.05462621688842773)
        let result = argMin(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(result.mean().item(Float.self), 0.25,
            accuracy: 0.005)
        XCTAssertEqual(result.sum().item(Float.self), 1,
            accuracy: 0.02)
    }

    func testCummax() {
        MLXRandom.seed(323)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.4485395550727844,
            accuracy: -0.008970791101455688)
        XCTAssertEqual(a.sum().item(Float.self), -5.382474422454834,
            accuracy: -0.10764948844909668)
        let result = a.cummax()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.1089742183685303,
            accuracy: 0.04217948436737061)
        XCTAssertEqual(result.sum().item(Float.self), 25.307689666748047,
            accuracy: 0.5061537933349609)
    }

    func testCummax1() {
        MLXRandom.seed(625)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.2803424596786499,
            accuracy: -0.0056068491935729985)
        XCTAssertEqual(a.sum().item(Float.self), -3.3641092777252197,
            accuracy: -0.0672821855545044)
        let result = cummax(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3141178786754608,
            accuracy: 0.006282357573509216)
        XCTAssertEqual(result.sum().item(Float.self), 3.7694144248962402,
            accuracy: 0.07538828849792481)
    }

    func testCummax2() {
        MLXRandom.seed(655)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.37031763792037964,
            accuracy: 0.0074063527584075925)
        XCTAssertEqual(a.sum().item(Float.self), 4.443811416625977,
            accuracy: 0.08887622833251953)
        let result = a.cummax(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.6860622763633728,
            accuracy: 0.013721245527267457)
        XCTAssertEqual(result.sum().item(Float.self), 8.232747077941895,
            accuracy: 0.1646549415588379)
    }

    func testCummax3() {
        MLXRandom.seed(934)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.05676526948809624,
            accuracy: -0.0011353053897619249)
        XCTAssertEqual(a.sum().item(Float.self), -0.6811832189559937,
            accuracy: -0.013623664379119873)
        let result = cummax(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.018919458612799644,
            accuracy: 0.0003783891722559929)
        XCTAssertEqual(result.sum().item(Float.self), 0.22703349590301514,
            accuracy: 0.004540669918060303)
    }

    func testCummin() {
        MLXRandom.seed(209)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.07204179465770721,
            accuracy: 0.0014408358931541443)
        XCTAssertEqual(a.sum().item(Float.self), 0.8645014762878418,
            accuracy: 0.017290029525756836)
        let result = a.cummin()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -2.270576000213623,
            accuracy: -0.04541152000427246)
        XCTAssertEqual(result.sum().item(Float.self), -27.246910095214844,
            accuracy: -0.5449382019042969)
    }

    func testCummin1() {
        MLXRandom.seed(989)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.16920256614685059,
            accuracy: -0.0033840513229370117)
        XCTAssertEqual(a.sum().item(Float.self), -2.030430793762207,
            accuracy: -0.04060861587524414)
        let result = cummin(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.9566025733947754,
            accuracy: -0.019132051467895508)
        XCTAssertEqual(result.sum().item(Float.self), -11.479230880737305,
            accuracy: -0.2295846176147461)
    }

    func testCummin2() {
        MLXRandom.seed(565)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.644216775894165,
            accuracy: -0.0128843355178833)
        XCTAssertEqual(a.sum().item(Float.self), -7.7306013107299805,
            accuracy: -0.1546120262145996)
        let result = a.cummin(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.9463123083114624,
            accuracy: -0.01892624616622925)
        XCTAssertEqual(result.sum().item(Float.self), -11.35574722290039,
            accuracy: -0.2271149444580078)
    }

    func testCummin3() {
        MLXRandom.seed(488)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.398279070854187,
            accuracy: -0.00796558141708374)
        XCTAssertEqual(a.sum().item(Float.self), -4.779348850250244,
            accuracy: -0.09558697700500489)
        let result = cummin(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.9816936254501343,
            accuracy: -0.019633872509002687)
        XCTAssertEqual(result.sum().item(Float.self), -11.780323028564453,
            accuracy: -0.23560646057128906)
    }

    func testCumprod() {
        MLXRandom.seed(453)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.0004353722033556551,
            accuracy: 8.707444067113101e-06)
        XCTAssertEqual(a.sum().item(Float.self), 0.005224466323852539,
            accuracy: 0.00010448932647705078)
        let result = a.cumprod()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.031617555767297745,
            accuracy: -0.0006323511153459549)
        XCTAssertEqual(result.sum().item(Float.self), -0.37941065430641174,
            accuracy: -0.007588213086128235)
    }

    func testCumprod1() {
        MLXRandom.seed(886)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.0051885247230529785,
            accuracy: -0.00010377049446105957)
        XCTAssertEqual(a.sum().item(Float.self), -0.06226229667663574,
            accuracy: -0.001245245933532715)
        let result = cumprod(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.14253053069114685,
            accuracy: 0.002850610613822937)
        XCTAssertEqual(result.sum().item(Float.self), 1.7103662490844727,
            accuracy: 0.034207324981689456)
    }

    func testCumprod2() {
        MLXRandom.seed(533)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.12974336743354797,
            accuracy: -0.0025948673486709596)
        XCTAssertEqual(a.sum().item(Float.self), -1.5569202899932861,
            accuracy: -0.031138405799865723)
        let result = a.cumprod(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.16878555715084076,
            accuracy: -0.0033757111430168154)
        XCTAssertEqual(result.sum().item(Float.self), -2.0254266262054443,
            accuracy: -0.04050853252410889)
    }

    func testCumprod3() {
        MLXRandom.seed(266)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.20902606844902039,
            accuracy: 0.004180521368980407)
        XCTAssertEqual(a.sum().item(Float.self), 2.508312702178955,
            accuracy: 0.050166254043579106)
        let result = cumprod(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7459201812744141,
            accuracy: 0.014918403625488281)
        XCTAssertEqual(result.sum().item(Float.self), 8.951042175292969,
            accuracy: 0.17902084350585937)
    }

    func testCumsum() {
        MLXRandom.seed(63)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.20442306995391846,
            accuracy: 0.004088461399078369)
        XCTAssertEqual(a.sum().item(Float.self), 2.4530768394470215,
            accuracy: 0.04906153678894043)
        let result = a.cumsum()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.2362117767333984,
            accuracy: 0.04472423553466797)
        XCTAssertEqual(result.sum().item(Float.self), 26.83454132080078,
            accuracy: 0.5366908264160156)
    }

    func testCumsum1() {
        MLXRandom.seed(824)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.07800808548927307,
            accuracy: 0.0015601617097854615)
        XCTAssertEqual(a.sum().item(Float.self), 0.9360969662666321,
            accuracy: 0.018721939325332643)
        let result = cumsum(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.16304373741149902,
            accuracy: -0.0032608747482299806)
        XCTAssertEqual(result.sum().item(Float.self), -1.9565248489379883,
            accuracy: -0.03913049697875977)
    }

    func testCumsum2() {
        MLXRandom.seed(940)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3181919455528259,
            accuracy: -0.0063638389110565186)
        XCTAssertEqual(a.sum().item(Float.self), -3.818303346633911,
            accuracy: -0.07636606693267822)
        let result = a.cumsum(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.8375476598739624,
            accuracy: -0.016750953197479247)
        XCTAssertEqual(result.sum().item(Float.self), -10.05057144165039,
            accuracy: -0.20101142883300782)
    }

    func testCumsum3() {
        MLXRandom.seed(561)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.19832412898540497,
            accuracy: 0.0039664825797081)
        XCTAssertEqual(a.sum().item(Float.self), 2.379889488220215,
            accuracy: 0.0475977897644043)
        let result = cumsum(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7345349788665771,
            accuracy: 0.014690699577331543)
        XCTAssertEqual(result.sum().item(Float.self), 8.814419746398926,
            accuracy: 0.17628839492797851)
    }

    func testExpandedDimensions() {
        MLXRandom.seed(937)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.38423240184783936,
            accuracy: -0.007684648036956787)
        XCTAssertEqual(a.sum().item(Float.self), -4.610788822174072,
            accuracy: -0.09221577644348145)
        let result = expandedDimensions(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3, 1])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.38423240184783936,
            accuracy: -0.007684648036956787)
        XCTAssertEqual(result.sum().item(Float.self), -4.610788822174072,
            accuracy: -0.09221577644348145)
    }

    func testExpandedDimensions1() {
        MLXRandom.seed(14)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5235790014266968,
            accuracy: 0.010471580028533935)
        XCTAssertEqual(a.sum().item(Float.self), 37.697689056396484,
            accuracy: 0.7539537811279297)
        let result = expandedDimensions(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [1, 2, 3, 4, 3, 1])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5235790014266968,
            accuracy: 0.010471580028533935)
        XCTAssertEqual(result.sum().item(Float.self), 37.697689056396484,
            accuracy: 0.7539537811279297)
    }

    func testFloor() {
        MLXRandom.seed(95)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.4827702045440674,
            accuracy: -0.009655404090881349)
        XCTAssertEqual(a.sum().item(Float.self), -5.793242454528809,
            accuracy: -0.11586484909057618)
        let result = floor(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -1.0833333730697632,
            accuracy: -0.021666667461395263)
        XCTAssertEqual(result.sum().item(Float.self), -13.0,
            accuracy: -0.26)
    }

    func testLog() {
        MLXRandom.seed(736)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.0185847282409668,
            accuracy: 0.020371694564819336)
        XCTAssertEqual(a.sum().item(Float.self), 12.223016738891602,
            accuracy: 0.24446033477783205)
        let result = a.log()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.08654867112636566,
            accuracy: -0.0017309734225273133)
        XCTAssertEqual(result.sum().item(Float.self), -1.0385839939117432,
            accuracy: -0.020771679878234865)
    }

    func testLog1() {
        MLXRandom.seed(860)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.9451824426651001,
            accuracy: 0.018903648853302004)
        XCTAssertEqual(a.sum().item(Float.self), 11.342188835144043,
            accuracy: 0.22684377670288086)
        let result = log(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.26455360651016235,
            accuracy: -0.0052910721302032475)
        XCTAssertEqual(result.sum().item(Float.self), -3.174643039703369,
            accuracy: -0.06349286079406738)
    }

    func testLog2() {
        MLXRandom.seed(408)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.1787240505218506,
            accuracy: 0.023574481010437014)
        XCTAssertEqual(a.sum().item(Float.self), 14.144688606262207,
            accuracy: 0.28289377212524414)
        let result = a.log2()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.11644445359706879,
            accuracy: 0.002328889071941376)
        XCTAssertEqual(result.sum().item(Float.self), 1.3973333835601807,
            accuracy: 0.027946667671203615)
    }

    func testLog21() {
        MLXRandom.seed(727)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.0156004428863525,
            accuracy: 0.020312008857727052)
        XCTAssertEqual(a.sum().item(Float.self), 12.18720531463623,
            accuracy: 0.2437441062927246)
        let result = log2(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.2411154955625534,
            accuracy: -0.004822309911251068)
        XCTAssertEqual(result.sum().item(Float.self), -2.893385887145996,
            accuracy: -0.057867717742919926)
    }

    func testLog10() {
        MLXRandom.seed(844)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.0754908323287964,
            accuracy: 0.02150981664657593)
        XCTAssertEqual(a.sum().item(Float.self), 12.905889511108398,
            accuracy: 0.25811779022216796)
        let result = a.log10()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.014521514996886253,
            accuracy: -0.0002904302999377251)
        XCTAssertEqual(result.sum().item(Float.self), -0.17425817251205444,
            accuracy: -0.003485163450241089)
    }

    func testLog101() {
        MLXRandom.seed(803)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.1359423398971558,
            accuracy: 0.022718846797943115)
        XCTAssertEqual(a.sum().item(Float.self), 13.631307601928711,
            accuracy: 0.2726261520385742)
        let result = log10(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.07397204637527466,
            accuracy: -0.0014794409275054933)
        XCTAssertEqual(result.sum().item(Float.self), -0.8876644968986511,
            accuracy: -0.017753289937973024)
    }

    func testLog1p() {
        MLXRandom.seed(684)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.3902796506881714,
            accuracy: 0.027805593013763428)
        XCTAssertEqual(a.sum().item(Float.self), 16.6833553314209,
            accuracy: 0.333667106628418)
        let result = a.log1p()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.851651668548584,
            accuracy: 0.01703303337097168)
        XCTAssertEqual(result.sum().item(Float.self), 10.219820022583008,
            accuracy: 0.20439640045166016)
    }

    func testLog1p1() {
        MLXRandom.seed(640)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.2758265733718872,
            accuracy: 0.025516531467437743)
        XCTAssertEqual(a.sum().item(Float.self), 15.309918403625488,
            accuracy: 0.3061983680725098)
        let result = log1p(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7979601621627808,
            accuracy: 0.015959203243255615)
        XCTAssertEqual(result.sum().item(Float.self), 9.575521469116211,
            accuracy: 0.1915104293823242)
    }

    func testLogSumExp() {
        MLXRandom.seed(1)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.01741863414645195,
            accuracy: 0.000348372682929039)
        XCTAssertEqual(a.sum().item(Float.self), 0.2090235948562622,
            accuracy: 0.004180471897125245)
        let result = a.logSumExp()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.8441760540008545,
            accuracy: 0.05688352108001709)
        XCTAssertEqual(result.sum().item(Float.self), 2.8441760540008545,
            accuracy: 0.05688352108001709)
    }

    func testLogSumExp1() {
        MLXRandom.seed(626)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.09981077909469604,
            accuracy: -0.001996215581893921)
        XCTAssertEqual(a.sum().item(Float.self), -1.1977293491363525,
            accuracy: -0.023954586982727052)
        let result = logSumExp(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.6805179119110107,
            accuracy: 0.05361035823822022)
        XCTAssertEqual(result.sum().item(Float.self), 2.6805179119110107,
            accuracy: 0.05361035823822022)
    }

    func testLogSumExp2() {
        MLXRandom.seed(505)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.16046583652496338,
            accuracy: 0.0032093167304992677)
        XCTAssertEqual(a.sum().item(Float.self), 1.9255900382995605,
            accuracy: 0.038511800765991214)
        let result = a.logSumExp(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.4977089166641235,
            accuracy: 0.029954178333282473)
        XCTAssertEqual(result.sum().item(Float.self), 5.990835666656494,
            accuracy: 0.11981671333312989)
    }

    func testLogSumExp3() {
        MLXRandom.seed(847)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.2282017469406128,
            accuracy: -0.004564034938812256)
        XCTAssertEqual(a.sum().item(Float.self), -2.7384209632873535,
            accuracy: -0.05476841926574707)
        let result = logSumExp(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.163524866104126,
            accuracy: 0.02327049732208252)
        XCTAssertEqual(result.sum().item(Float.self), 4.654099464416504,
            accuracy: 0.09308198928833009)
    }

    func testLogSumExp4() {
        MLXRandom.seed(888)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.512793242931366,
            accuracy: 0.01025586485862732)
        XCTAssertEqual(a.sum().item(Float.self), 36.921112060546875,
            accuracy: 0.7384222412109375)
        let result = a.logSumExp(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.3400487899780273,
            accuracy: 0.04680097579956055)
        XCTAssertEqual(result.sum().item(Float.self), 28.080583572387695,
            accuracy: 0.5616116714477539)
    }

    func testLogSumExp5() {
        MLXRandom.seed(341)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5185534358024597,
            accuracy: 0.010371068716049195)
        XCTAssertEqual(a.sum().item(Float.self), 37.335845947265625,
            accuracy: 0.7467169189453126)
        let result = logSumExp(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.3395986557006836,
            accuracy: 0.046791973114013674)
        XCTAssertEqual(result.sum().item(Float.self), 28.07518196105957,
            accuracy: 0.5615036392211914)
    }

    func testMax() {
        MLXRandom.seed(249)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5458451509475708,
            accuracy: 0.010916903018951415)
        XCTAssertEqual(a.sum().item(Float.self), 6.55014181137085,
            accuracy: 0.13100283622741699)
        let result = a.max()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.437469005584717,
            accuracy: 0.048749380111694336)
        XCTAssertEqual(result.sum().item(Float.self), 2.437469005584717,
            accuracy: 0.048749380111694336)
    }

    func testMax1() {
        MLXRandom.seed(747)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.23745165765285492,
            accuracy: 0.004749033153057099)
        XCTAssertEqual(a.sum().item(Float.self), 2.8494198322296143,
            accuracy: 0.056988396644592286)
        let result = max(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.8713812828063965,
            accuracy: 0.03742762565612793)
        XCTAssertEqual(result.sum().item(Float.self), 1.8713812828063965,
            accuracy: 0.03742762565612793)
    }

    func testMax2() {
        MLXRandom.seed(333)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.08884426206350327,
            accuracy: 0.0017768852412700653)
        XCTAssertEqual(a.sum().item(Float.self), 1.0661311149597168,
            accuracy: 0.021322622299194335)
        let result = a.max(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9345294833183289,
            accuracy: 0.018690589666366577)
        XCTAssertEqual(result.sum().item(Float.self), 3.7381179332733154,
            accuracy: 0.07476235866546631)
    }

    func testMax3() {
        MLXRandom.seed(720)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.03598502278327942,
            accuracy: -0.0007197004556655884)
        XCTAssertEqual(a.sum().item(Float.self), -0.431820273399353,
            accuracy: -0.00863640546798706)
        let result = max(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.0814929008483887,
            accuracy: 0.021629858016967773)
        XCTAssertEqual(result.sum().item(Float.self), 4.325971603393555,
            accuracy: 0.08651943206787109)
    }

    func testMax4() {
        MLXRandom.seed(891)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4746115505695343,
            accuracy: 0.009492231011390686)
        XCTAssertEqual(a.sum().item(Float.self), 34.17203140258789,
            accuracy: 0.6834406280517579)
        let result = a.max(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.8310352563858032,
            accuracy: 0.016620705127716066)
        XCTAssertEqual(result.sum().item(Float.self), 9.97242259979248,
            accuracy: 0.19944845199584962)
    }

    func testMax5() {
        MLXRandom.seed(64)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5222265124320984,
            accuracy: 0.010444530248641969)
        XCTAssertEqual(a.sum().item(Float.self), 37.60030746459961,
            accuracy: 0.7520061492919922)
        let result = max(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.8983621597290039,
            accuracy: 0.01796724319458008)
        XCTAssertEqual(result.sum().item(Float.self), 10.780345916748047,
            accuracy: 0.21560691833496093)
    }

    func testMean() {
        MLXRandom.seed(195)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.8051623702049255,
            accuracy: 0.016103247404098513)
        XCTAssertEqual(a.sum().item(Float.self), 9.661948204040527,
            accuracy: 0.19323896408081054)
        let result = a.mean()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.8051623702049255,
            accuracy: 0.016103247404098513)
        XCTAssertEqual(result.sum().item(Float.self), 0.8051623702049255,
            accuracy: 0.016103247404098513)
    }

    func testMean1() {
        MLXRandom.seed(939)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
        XCTAssertEqual(a.sum().item(Float.self), -2.0067548751831055,
            accuracy: -0.040135097503662114)
        let result = mean(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
        XCTAssertEqual(result.sum().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
    }

    func testMean2() {
        MLXRandom.seed(581)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3291994333267212,
            accuracy: -0.006583988666534424)
        XCTAssertEqual(a.sum().item(Float.self), -3.950392961502075,
            accuracy: -0.0790078592300415)
        let result = a.mean(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.3291994333267212,
            accuracy: -0.006583988666534424)
        XCTAssertEqual(result.sum().item(Float.self), -1.3167977333068848,
            accuracy: -0.026335954666137695)
    }

    func testMean3() {
        MLXRandom.seed(227)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.28339889645576477,
            accuracy: -0.005667977929115295)
        XCTAssertEqual(a.sum().item(Float.self), -3.4007866382598877,
            accuracy: -0.06801573276519776)
        let result = mean(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.2833988666534424,
            accuracy: -0.005667977333068848)
        XCTAssertEqual(result.sum().item(Float.self), -1.1335954666137695,
            accuracy: -0.022671909332275392)
    }

    func testMean4() {
        MLXRandom.seed(244)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5118785500526428,
            accuracy: 0.010237571001052857)
        XCTAssertEqual(a.sum().item(Float.self), 36.855255126953125,
            accuracy: 0.7371051025390625)
        let result = a.mean(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5118785500526428,
            accuracy: 0.010237571001052857)
        XCTAssertEqual(result.sum().item(Float.self), 6.142542362213135,
            accuracy: 0.12285084724426269)
    }

    func testMean5() {
        MLXRandom.seed(822)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4916161596775055,
            accuracy: 0.00983232319355011)
        XCTAssertEqual(a.sum().item(Float.self), 35.3963623046875,
            accuracy: 0.70792724609375)
        let result = mean(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.4916161894798279,
            accuracy: 0.009832323789596557)
        XCTAssertEqual(result.sum().item(Float.self), 5.8993940353393555,
            accuracy: 0.11798788070678712)
    }

    func testMin() {
        MLXRandom.seed(990)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.2101413607597351,
            accuracy: -0.0042028272151947025)
        XCTAssertEqual(a.sum().item(Float.self), -2.5216963291168213,
            accuracy: -0.050433926582336426)
        let result = a.min()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -2.5653531551361084,
            accuracy: -0.05130706310272217)
        XCTAssertEqual(result.sum().item(Float.self), -2.5653531551361084,
            accuracy: -0.05130706310272217)
    }

    func testMin1() {
        MLXRandom.seed(145)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.16449235379695892,
            accuracy: -0.0032898470759391784)
        XCTAssertEqual(a.sum().item(Float.self), -1.9739081859588623,
            accuracy: -0.03947816371917725)
        let result = min(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -1.3645747900009155,
            accuracy: -0.02729149580001831)
        XCTAssertEqual(result.sum().item(Float.self), -1.3645747900009155,
            accuracy: -0.02729149580001831)
    }

    func testMin2() {
        MLXRandom.seed(822)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.025983989238739014,
            accuracy: 0.0005196797847747803)
        XCTAssertEqual(a.sum().item(Float.self), 0.31180787086486816,
            accuracy: 0.006236157417297363)
        let result = a.min(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.8900715708732605,
            accuracy: -0.01780143141746521)
        XCTAssertEqual(result.sum().item(Float.self), -3.560286283493042,
            accuracy: -0.07120572566986084)
    }

    func testMin3() {
        MLXRandom.seed(556)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.47528061270713806,
            accuracy: 0.00950561225414276)
        XCTAssertEqual(a.sum().item(Float.self), 5.703367233276367,
            accuracy: 0.11406734466552734)
        let result = min(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.6413009166717529,
            accuracy: -0.012826018333435059)
        XCTAssertEqual(result.sum().item(Float.self), -2.5652036666870117,
            accuracy: -0.051304073333740235)
    }

    func testMin4() {
        MLXRandom.seed(458)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4730764627456665,
            accuracy: 0.00946152925491333)
        XCTAssertEqual(a.sum().item(Float.self), 34.06150436401367,
            accuracy: 0.6812300872802735)
        let result = a.min(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.09017934650182724,
            accuracy: 0.0018035869300365448)
        XCTAssertEqual(result.sum().item(Float.self), 1.0821521282196045,
            accuracy: 0.02164304256439209)
    }

    func testMin5() {
        MLXRandom.seed(93)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4830058515071869,
            accuracy: 0.009660117030143738)
        XCTAssertEqual(a.sum().item(Float.self), 34.77642059326172,
            accuracy: 0.6955284118652344)
        let result = min(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.11048994958400726,
            accuracy: 0.0022097989916801454)
        XCTAssertEqual(result.sum().item(Float.self), 1.3258793354034424,
            accuracy: 0.02651758670806885)
    }

    func testProduct() {
        MLXRandom.seed(82)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.2605368494987488,
            accuracy: 0.005210736989974976)
        XCTAssertEqual(a.sum().item(Float.self), 3.1264421939849854,
            accuracy: 0.0625288438796997)
        let result = a.product()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -2.726646744122263e-05,
            accuracy: -5.453293488244526e-07)
        XCTAssertEqual(result.sum().item(Float.self), -2.726646744122263e-05,
            accuracy: -5.453293488244526e-07)
    }

    func testProduct1() {
        MLXRandom.seed(327)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.296897828578949,
            accuracy: -0.00593795657157898)
        XCTAssertEqual(a.sum().item(Float.self), -3.5627739429473877,
            accuracy: -0.07125547885894776)
        let result = product(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 3.555632019924815e-06,
            accuracy: 7.11126403984963e-08)
        XCTAssertEqual(result.sum().item(Float.self), 3.555632019924815e-06,
            accuracy: 7.11126403984963e-08)
    }

    func testProduct2() {
        MLXRandom.seed(896)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.05823778361082077,
            accuracy: -0.0011647556722164155)
        XCTAssertEqual(a.sum().item(Float.self), -0.6988533735275269,
            accuracy: -0.013977067470550537)
        let result = a.product(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.6222327351570129,
            accuracy: 0.012444654703140259)
        XCTAssertEqual(result.sum().item(Float.self), 2.4889309406280518,
            accuracy: 0.049778618812561036)
    }

    func testProduct3() {
        MLXRandom.seed(520)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.19801780581474304,
            accuracy: 0.003960356116294861)
        XCTAssertEqual(a.sum().item(Float.self), 2.376213550567627,
            accuracy: 0.04752427101135254)
        let result = product(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0764155238866806,
            accuracy: 0.0015283104777336122)
        XCTAssertEqual(result.sum().item(Float.self), 0.3056620955467224,
            accuracy: 0.006113241910934449)
    }

    func testProduct4() {
        MLXRandom.seed(955)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4643688201904297,
            accuracy: 0.009287376403808594)
        XCTAssertEqual(a.sum().item(Float.self), 33.43455505371094,
            accuracy: 0.6686911010742188)
        let result = a.product(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.005116840824484825,
            accuracy: 0.00010233681648969651)
        XCTAssertEqual(result.sum().item(Float.self), 0.0614020898938179,
            accuracy: 0.0012280417978763581)
    }

    func testProduct5() {
        MLXRandom.seed(501)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5341216921806335,
            accuracy: 0.010682433843612671)
        XCTAssertEqual(a.sum().item(Float.self), 38.45676040649414,
            accuracy: 0.7691352081298828)
        let result = product(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.02406497858464718,
            accuracy: 0.0004812995716929436)
        XCTAssertEqual(result.sum().item(Float.self), 0.28877973556518555,
            accuracy: 0.0057755947113037115)
    }

    func testReciprocal() {
        MLXRandom.seed(111)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.31357258558273315,
            accuracy: 0.006271451711654663)
        XCTAssertEqual(a.sum().item(Float.self), 3.762871026992798,
            accuracy: 0.07525742053985596)
        let result = a.reciprocal()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9539644122123718,
            accuracy: 0.019079288244247438)
        XCTAssertEqual(result.sum().item(Float.self), 11.447572708129883,
            accuracy: 0.22895145416259766)
    }

    func testReciprocal1() {
        MLXRandom.seed(308)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.12339428067207336,
            accuracy: -0.0024678856134414673)
        XCTAssertEqual(a.sum().item(Float.self), -1.4807313680648804,
            accuracy: -0.029614627361297607)
        let result = reciprocal(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.3978341817855835,
            accuracy: 0.02795668363571167)
        XCTAssertEqual(result.sum().item(Float.self), 16.774009704589844,
            accuracy: 0.33548019409179686)
    }

    func testRound() {
        MLXRandom.seed(564)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.20050053298473358,
            accuracy: -0.004010010659694672)
        XCTAssertEqual(a.sum().item(Float.self), -2.406006336212158,
            accuracy: -0.048120126724243165)
        let result = a.round()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.1666666716337204,
            accuracy: -0.003333333432674408)
        XCTAssertEqual(result.sum().item(Float.self), -2.0,
            accuracy: -0.04)
    }

    func testRound1() {
        MLXRandom.seed(298)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.23528259992599487,
            accuracy: 0.004705651998519898)
        XCTAssertEqual(a.sum().item(Float.self), 2.8233911991119385,
            accuracy: 0.05646782398223877)
        let result = round(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.25,
            accuracy: 0.005)
        XCTAssertEqual(result.sum().item(Float.self), 3.0,
            accuracy: 0.06)
    }

    func testSin() {
        MLXRandom.seed(723)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.16675782203674316,
            accuracy: 0.0033351564407348632)
        XCTAssertEqual(a.sum().item(Float.self), 2.001093864440918,
            accuracy: 0.04002187728881836)
        let result = a.sin()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.11908348649740219,
            accuracy: 0.0023816697299480437)
        XCTAssertEqual(result.sum().item(Float.self), 1.429001808166504,
            accuracy: 0.028580036163330078)
    }

    func testSin1() {
        MLXRandom.seed(127)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.18461060523986816,
            accuracy: -0.0036922121047973633)
        XCTAssertEqual(a.sum().item(Float.self), -2.215327262878418,
            accuracy: -0.04430654525756836)
        let result = sin(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.15534619987010956,
            accuracy: -0.0031069239974021914)
        XCTAssertEqual(result.sum().item(Float.self), -1.86415433883667,
            accuracy: -0.0372830867767334)
    }

    func testCos() {
        MLXRandom.seed(560)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.15535306930541992,
            accuracy: -0.0031070613861083987)
        XCTAssertEqual(a.sum().item(Float.self), -1.864236831665039,
            accuracy: -0.03728473663330078)
        let result = a.cos()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5902791023254395,
            accuracy: 0.01180558204650879)
        XCTAssertEqual(result.sum().item(Float.self), 7.083348751068115,
            accuracy: 0.1416669750213623)
    }

    func testCos1() {
        MLXRandom.seed(340)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.18920934200286865,
            accuracy: 0.003784186840057373)
        XCTAssertEqual(a.sum().item(Float.self), 2.270512104034424,
            accuracy: 0.04541024208068848)
        let result = cos(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7257080078125,
            accuracy: 0.01451416015625)
        XCTAssertEqual(result.sum().item(Float.self), 8.70849609375,
            accuracy: 0.174169921875)
    }

    func testSqrt() {
        MLXRandom.seed(834)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.1289045810699463,
            accuracy: 0.022578091621398927)
        XCTAssertEqual(a.sum().item(Float.self), 13.546854972839355,
            accuracy: 0.2709370994567871)
        let result = a.sqrt()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.0152535438537598,
            accuracy: 0.020305070877075195)
        XCTAssertEqual(result.sum().item(Float.self), 12.1830415725708,
            accuracy: 0.243660831451416)
    }

    func testSqrt1() {
        MLXRandom.seed(944)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.1813615560531616,
            accuracy: 0.023627231121063234)
        XCTAssertEqual(a.sum().item(Float.self), 14.176338195800781,
            accuracy: 0.2835267639160156)
        let result = sqrt(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.040137767791748,
            accuracy: 0.02080275535583496)
        XCTAssertEqual(result.sum().item(Float.self), 12.481653213500977,
            accuracy: 0.24963306427001955)
    }

    func testSum() {
        MLXRandom.seed(553)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.41794854402542114,
            accuracy: 0.008358970880508423)
        XCTAssertEqual(a.sum().item(Float.self), 5.015382289886475,
            accuracy: 0.1003076457977295)
        let result = a.sum()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 5.015382289886475,
            accuracy: 0.1003076457977295)
        XCTAssertEqual(result.sum().item(Float.self), 5.015382289886475,
            accuracy: 0.1003076457977295)
    }

    func testSum1() {
        MLXRandom.seed(208)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.013726795092225075,
            accuracy: 0.0002745359018445015)
        XCTAssertEqual(a.sum().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
        let result = sum(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
        XCTAssertEqual(result.sum().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
    }

    func testSum2() {
        MLXRandom.seed(986)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.08680947870016098,
            accuracy: 0.0017361895740032197)
        XCTAssertEqual(a.sum().item(Float.self), 1.0417137145996094,
            accuracy: 0.020834274291992187)
        let result = a.sum(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.26042836904525757,
            accuracy: 0.005208567380905151)
        XCTAssertEqual(result.sum().item(Float.self), 1.0417134761810303,
            accuracy: 0.020834269523620604)
    }

    func testSum3() {
        MLXRandom.seed(818)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.01743374764919281,
            accuracy: -0.0003486749529838562)
        XCTAssertEqual(a.sum().item(Float.self), -0.20920497179031372,
            accuracy: -0.004184099435806275)
        let result = sum(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.05230128765106201,
            accuracy: -0.0010460257530212403)
        XCTAssertEqual(result.sum().item(Float.self), -0.20920515060424805,
            accuracy: -0.004184103012084961)
    }

    func testSum4() {
        MLXRandom.seed(617)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5379223823547363,
            accuracy: 0.010758447647094728)
        XCTAssertEqual(a.sum().item(Float.self), 38.730411529541016,
            accuracy: 0.7746082305908203)
        let result = a.sum(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 3.227534294128418,
            accuracy: 0.06455068588256836)
        XCTAssertEqual(result.sum().item(Float.self), 38.730411529541016,
            accuracy: 0.7746082305908203)
    }

    func testSum5() {
        MLXRandom.seed(560)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4772148132324219,
            accuracy: 0.009544296264648438)
        XCTAssertEqual(a.sum().item(Float.self), 34.359466552734375,
            accuracy: 0.6871893310546875)
        let result = sum(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 2.8632893562316895,
            accuracy: 0.05726578712463379)
        XCTAssertEqual(result.sum().item(Float.self), 34.35947036743164,
            accuracy: 0.6871894073486329)
    }

    func testVariance() {
        MLXRandom.seed(601)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.24374054372310638,
            accuracy: 0.004874810874462128)
        XCTAssertEqual(a.sum().item(Float.self), 2.924886465072632,
            accuracy: 0.05849772930145264)
        let result = a.variance()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3644942045211792,
            accuracy: 0.007289884090423584)
        XCTAssertEqual(result.sum().item(Float.self), 0.3644942045211792,
            accuracy: 0.007289884090423584)
    }

    func testVariance1() {
        MLXRandom.seed(294)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.047887593507766724,
            accuracy: 0.0009577518701553345)
        XCTAssertEqual(a.sum().item(Float.self), 0.5746511220932007,
            accuracy: 0.011493022441864014)
        let result = variance(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.6768754124641418,
            accuracy: 0.013537508249282838)
        XCTAssertEqual(result.sum().item(Float.self), 0.6768754124641418,
            accuracy: 0.013537508249282838)
    }

    func testVariance2() {
        MLXRandom.seed(455)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.07983233034610748,
            accuracy: 0.0015966466069221496)
        XCTAssertEqual(a.sum().item(Float.self), 0.957987904548645,
            accuracy: 0.019159758090972902)
        let result = a.variance(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5036177039146423,
            accuracy: 0.010072354078292847)
        XCTAssertEqual(result.sum().item(Float.self), 2.0144708156585693,
            accuracy: 0.040289416313171386)
    }

    func testVariance3() {
        MLXRandom.seed(93)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.028267383575439453,
            accuracy: -0.0005653476715087891)
        XCTAssertEqual(a.sum().item(Float.self), -0.33920860290527344,
            accuracy: -0.006784172058105469)
        let result = variance(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.0322922468185425,
            accuracy: 0.02064584493637085)
        XCTAssertEqual(result.sum().item(Float.self), 4.12916898727417,
            accuracy: 0.0825833797454834)
    }

    func testVariance4() {
        MLXRandom.seed(610)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4193626046180725,
            accuracy: 0.00838725209236145)
        XCTAssertEqual(a.sum().item(Float.self), 30.194107055664062,
            accuracy: 0.6038821411132813)
        let result = a.variance(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.07003539055585861,
            accuracy: 0.0014007078111171723)
        XCTAssertEqual(result.sum().item(Float.self), 0.840424656867981,
            accuracy: 0.01680849313735962)
    }

    func testVariance5() {
        MLXRandom.seed(817)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4460234045982361,
            accuracy: 0.008920468091964721)
        XCTAssertEqual(a.sum().item(Float.self), 32.113685607910156,
            accuracy: 0.6422737121582032)
        let result = variance(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0666377991437912,
            accuracy: 0.001332755982875824)
        XCTAssertEqual(result.sum().item(Float.self), 0.7996535301208496,
            accuracy: 0.015993070602416993)
    }

    func testAcos() {
        MLXRandom.seed(394)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5139000415802002,
            accuracy: 0.010278000831604003)
        XCTAssertEqual(a.sum().item(Float.self), 6.166800498962402,
            accuracy: 0.12333600997924805)
        let result = acos(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9816445112228394,
            accuracy: 0.019632890224456787)
        XCTAssertEqual(result.sum().item(Float.self), 11.779733657836914,
            accuracy: 0.2355946731567383)
    }

    func testAcosh() {
        MLXRandom.seed(324)
        let a = MLXRandom.uniform(low: 1, high: 3, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.9701108932495117,
            accuracy: 0.039402217864990235)
        XCTAssertEqual(a.sum().item(Float.self), 23.64133071899414,
            accuracy: 0.4728266143798828)
        let result = acosh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.1439350843429565,
            accuracy: 0.02287870168685913)
        XCTAssertEqual(result.sum().item(Float.self), 13.72722053527832,
            accuracy: 0.2745444107055664)
    }

    func testAsin() {
        MLXRandom.seed(589)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5361738801002502,
            accuracy: 0.010723477602005005)
        XCTAssertEqual(a.sum().item(Float.self), 6.434086322784424,
            accuracy: 0.12868172645568848)
        let result = asin(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5976895093917847,
            accuracy: 0.011953790187835694)
        XCTAssertEqual(result.sum().item(Float.self), 7.172273635864258,
            accuracy: 0.14344547271728517)
    }

    func testAsinh() {
        MLXRandom.seed(247)
        let a = MLXRandom.uniform(low: 1, high: 3, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 1.8222084045410156,
            accuracy: 0.036444168090820316)
        XCTAssertEqual(a.sum().item(Float.self), 21.866500854492188,
            accuracy: 0.43733001708984376)
        let result = asinh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.340692400932312,
            accuracy: 0.026813848018646242)
        XCTAssertEqual(result.sum().item(Float.self), 16.088308334350586,
            accuracy: 0.32176616668701175)
    }

    func testAtan() {
        MLXRandom.seed(297)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.45578455924987793,
            accuracy: 0.00911569118499756)
        XCTAssertEqual(a.sum().item(Float.self), 5.469414710998535,
            accuracy: 0.1093882942199707)
        let result = atan(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.415025919675827,
            accuracy: 0.00830051839351654)
        XCTAssertEqual(result.sum().item(Float.self), 4.980310916900635,
            accuracy: 0.0996062183380127)
    }

    func testAtanh() {
        MLXRandom.seed(188)
        let a = MLXRandom.uniform(low: 0.1, high: 0.9, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.3955610692501068,
            accuracy: 0.007911221385002136)
        XCTAssertEqual(a.sum().item(Float.self), 4.746732711791992,
            accuracy: 0.09493465423583984)
        let result = atanh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.43353432416915894,
            accuracy: 0.00867068648338318)
        XCTAssertEqual(result.sum().item(Float.self), 5.202411651611328,
            accuracy: 0.10404823303222656)
    }

    func testCeil() {
        MLXRandom.seed(193)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4008181691169739,
            accuracy: 0.008016363382339478)
        XCTAssertEqual(a.sum().item(Float.self), 4.809817790985107,
            accuracy: 0.09619635581970215)
        let result = ceil(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9166666865348816,
            accuracy: 0.01833333373069763)
        XCTAssertEqual(result.sum().item(Float.self), 11.0,
            accuracy: 0.22)
    }

    func testCosh() {
        MLXRandom.seed(841)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3292633295059204,
            accuracy: -0.006585266590118408)
        XCTAssertEqual(a.sum().item(Float.self), -3.951159715652466,
            accuracy: -0.07902319431304931)
        let result = cosh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.7108967304229736,
            accuracy: 0.034217934608459476)
        XCTAssertEqual(result.sum().item(Float.self), 20.530759811401367,
            accuracy: 0.41061519622802733)
    }

    func testErf() {
        MLXRandom.seed(191)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.5465152263641357,
            accuracy: -0.010930304527282716)
        XCTAssertEqual(a.sum().item(Float.self), -6.558182239532471,
            accuracy: -0.1311636447906494)
        let result = erf(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.3972204625606537,
            accuracy: -0.007944409251213074)
        XCTAssertEqual(result.sum().item(Float.self), -4.766645431518555,
            accuracy: -0.0953329086303711)
    }

    func testErfInverse() {
        MLXRandom.seed(33)
        let a = MLXRandom.uniform(low: 0.1, high: 0.9, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5479786396026611,
            accuracy: 0.010959572792053222)
        XCTAssertEqual(a.sum().item(Float.self), 6.575743675231934,
            accuracy: 0.13151487350463867)
        let result = erfInverse(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5522865653038025,
            accuracy: 0.01104573130607605)
        XCTAssertEqual(result.sum().item(Float.self), 6.627438545227051,
            accuracy: 0.132548770904541)
    }

    func testLogicalNot() {
        MLXRandom.seed(627)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.007127379532903433,
            accuracy: 0.00014254759065806865)
        XCTAssertEqual(a.sum().item(Float.self), 0.08552855253219604,
            accuracy: 0.0017105710506439208)
        let result = logicalNot(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testNegative() {
        MLXRandom.seed(672)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.16328130662441254,
            accuracy: 0.0032656261324882506)
        XCTAssertEqual(a.sum().item(Float.self), 1.9593756198883057,
            accuracy: 0.03918751239776611)
        let result = negative(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.16328130662441254,
            accuracy: -0.0032656261324882506)
        XCTAssertEqual(result.sum().item(Float.self), -1.9593756198883057,
            accuracy: -0.03918751239776611)
    }

    func testSigmoid() {
        MLXRandom.seed(266)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.20902606844902039,
            accuracy: 0.004180521368980407)
        XCTAssertEqual(a.sum().item(Float.self), 2.508312702178955,
            accuracy: 0.050166254043579106)
        let result = sigmoid(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5332736372947693,
            accuracy: 0.010665472745895386)
        XCTAssertEqual(result.sum().item(Float.self), 6.399283409118652,
            accuracy: 0.12798566818237306)
    }

    func testSign() {
        MLXRandom.seed(487)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.4737564027309418,
            accuracy: -0.009475128054618835)
        XCTAssertEqual(a.sum().item(Float.self), -5.685076713562012,
            accuracy: -0.11370153427124023)
        let result = sign(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.5,
            accuracy: -0.01)
        XCTAssertEqual(result.sum().item(Float.self), -6.0,
            accuracy: -0.12)
    }

    func testSinh() {
        MLXRandom.seed(70)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.19362865388393402,
            accuracy: -0.0038725730776786806)
        XCTAssertEqual(a.sum().item(Float.self), -2.3235437870025635,
            accuracy: -0.04647087574005127)
        let result = sinh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.2631848156452179,
            accuracy: -0.005263696312904358)
        XCTAssertEqual(result.sum().item(Float.self), -3.158217668533325,
            accuracy: -0.0631643533706665)
    }

    func testSoftMax() {
        MLXRandom.seed(91)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.37823864817619324,
            accuracy: 0.007564772963523865)
        XCTAssertEqual(a.sum().item(Float.self), 4.538863658905029,
            accuracy: 0.09077727317810058)
        let result = softMax(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0833333358168602,
            accuracy: 0.001666666716337204)
        XCTAssertEqual(result.sum().item(Float.self), 1.0,
            accuracy: 0.02)
    }

    func testSoftMax1() {
        MLXRandom.seed(695)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.14673520624637604,
            accuracy: -0.002934704124927521)
        XCTAssertEqual(a.sum().item(Float.self), -1.7608224153518677,
            accuracy: -0.03521644830703735)
        let result = softMax(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3333333432674408,
            accuracy: 0.006666666865348816)
        XCTAssertEqual(result.sum().item(Float.self), 4.0,
            accuracy: 0.08)
    }

    func testSoftMax2() {
        MLXRandom.seed(775)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5035431385040283,
            accuracy: 0.010070862770080567)
        XCTAssertEqual(a.sum().item(Float.self), 36.255104064941406,
            accuracy: 0.7251020812988281)
        let result = softMax(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [2, 3, 4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.1666666716337204,
            accuracy: 0.003333333432674408)
        XCTAssertEqual(result.sum().item(Float.self), 12.0,
            accuracy: 0.24)
    }

    func testTan() {
        MLXRandom.seed(133)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.24041497707366943,
            accuracy: -0.004808299541473389)
        XCTAssertEqual(a.sum().item(Float.self), -2.884979724884033,
            accuracy: -0.05769959449768067)
        let result = tan(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -1.4056938886642456,
            accuracy: -0.028113877773284914)
        XCTAssertEqual(result.sum().item(Float.self), -16.86832618713379,
            accuracy: -0.3373665237426758)
    }

    func testTanh() {
        MLXRandom.seed(897)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3048655390739441,
            accuracy: -0.006097310781478882)
        XCTAssertEqual(a.sum().item(Float.self), -3.65838623046875,
            accuracy: -0.073167724609375)
        let result = tanh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.1846114993095398,
            accuracy: -0.003692229986190796)
        XCTAssertEqual(result.sum().item(Float.self), -2.2153379917144775,
            accuracy: -0.04430675983428955)
    }

    func testMLXadd() {
        MLXRandom.seed(153)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.45169347524642944,
            accuracy: -0.009033869504928588)
        XCTAssertEqual(a.sum().item(Float.self), -5.420321464538574,
            accuracy: -0.10840642929077149)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.4135611951351166,
            accuracy: 0.008271223902702332)
        XCTAssertEqual(b.sum().item(Float.self), 4.962734222412109,
            accuracy: 0.09925468444824219)
        let result = MLX.add(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.038132235407829285,
            accuracy: -0.0007626447081565857)
        XCTAssertEqual(result.sum().item(Float.self), -0.4575868248939514,
            accuracy: -0.009151736497879029)
    }

    func testConv1d() {
        MLXRandom.seed(945)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [4, 10, 4])
        XCTAssertEqual(a.shape, [4, 10, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.48101645708084106,
            accuracy: 0.009620329141616821)
        XCTAssertEqual(a.sum().item(Float.self), 76.96263122558594,
            accuracy: 1.5392526245117188)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [2, 10, 4])
        XCTAssertEqual(b.shape, [2, 10, 4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.5652215480804443,
            accuracy: 0.011304430961608887)
        XCTAssertEqual(b.sum().item(Float.self), 45.21772384643555,
            accuracy: 0.904354476928711)
        let result = conv1d(a, b)
        XCTAssertEqual(result.shape, [4, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 10.589902877807617,
            accuracy: 0.21179805755615236)
        XCTAssertEqual(result.sum().item(Float.self), 84.71922302246094,
            accuracy: 1.6943844604492189)
    }

    func testConv2d() {
        MLXRandom.seed(39)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [4, 10, 12, 4])
        XCTAssertEqual(a.shape, [4, 10, 12, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5260733366012573,
            accuracy: 0.010521466732025147)
        XCTAssertEqual(a.sum().item(Float.self), 1010.0607299804688,
            accuracy: 20.201214599609376)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [2, 10, 12, 4])
        XCTAssertEqual(b.shape, [2, 10, 12, 4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.4953395426273346,
            accuracy: 0.009906790852546692)
        XCTAssertEqual(b.sum().item(Float.self), 475.52593994140625,
            accuracy: 9.510518798828125)
        let result = conv2d(a, b)
        XCTAssertEqual(result.shape, [4, 1, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 125.77770233154297,
            accuracy: 2.5155540466308595)
        XCTAssertEqual(result.sum().item(Float.self), 1006.2216186523438,
            accuracy: 20.124432373046876)
    }

    func testConvolve() {
        MLXRandom.seed(862)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [20])
        XCTAssertEqual(a.shape, [20])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4844416081905365,
            accuracy: 0.00968883216381073)
        XCTAssertEqual(a.sum().item(Float.self), 9.68883228302002,
            accuracy: 0.1937766456604004)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [4])
        XCTAssertEqual(b.shape, [4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.5360236167907715,
            accuracy: 0.01072047233581543)
        XCTAssertEqual(b.sum().item(Float.self), 2.144094467163086,
            accuracy: 0.04288188934326172)
        let result = convolve(a, b)
        XCTAssertEqual(result.shape, [23])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9032073616981506,
            accuracy: 0.018064147233963015)
        XCTAssertEqual(result.sum().item(Float.self), 20.77376937866211,
            accuracy: 0.4154753875732422)
    }

    func testDivide() {
        MLXRandom.seed(82)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.2605368494987488,
            accuracy: 0.005210736989974976)
        XCTAssertEqual(a.sum().item(Float.self), 3.1264421939849854,
            accuracy: 0.0625288438796997)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.05087272450327873,
            accuracy: 0.0010174544900655746)
        XCTAssertEqual(b.sum().item(Float.self), 0.6104726791381836,
            accuracy: 0.012209453582763673)
        let result = divide(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.39920175075531006,
            accuracy: 0.007984035015106201)
        XCTAssertEqual(result.sum().item(Float.self), 4.790421009063721,
            accuracy: 0.09580842018127442)
    }

    func testEqual() {
        MLXRandom.seed(919)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.2972916066646576,
            accuracy: -0.005945832133293152)
        XCTAssertEqual(a.sum().item(Float.self), -3.5674991607666016,
            accuracy: -0.07134998321533204)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.04941798374056816,
            accuracy: 0.0009883596748113633)
        XCTAssertEqual(b.sum().item(Float.self), 0.5930157899856567,
            accuracy: 0.011860315799713136)
        let result = equal(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testGreater() {
        MLXRandom.seed(716)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.3898356854915619,
            accuracy: 0.007796713709831238)
        XCTAssertEqual(a.sum().item(Float.self), 4.678028106689453,
            accuracy: 0.09356056213378906)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.30894142389297485,
            accuracy: -0.0061788284778594976)
        XCTAssertEqual(b.sum().item(Float.self), -3.707296848297119,
            accuracy: -0.07414593696594239)
        let result = greater(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterEqual() {
        MLXRandom.seed(945)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.3744015097618103,
            accuracy: 0.007488030195236206)
        XCTAssertEqual(a.sum().item(Float.self), 4.4928178787231445,
            accuracy: 0.08985635757446289)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.20527128875255585,
            accuracy: -0.004105425775051117)
        XCTAssertEqual(b.sum().item(Float.self), -2.4632554054260254,
            accuracy: -0.04926510810852051)
        let result = greaterEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLess() {
        MLXRandom.seed(849)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.5959362983703613,
            accuracy: -0.011918725967407227)
        XCTAssertEqual(a.sum().item(Float.self), -7.151235103607178,
            accuracy: -0.14302470207214354)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.42154282331466675,
            accuracy: 0.008430856466293336)
        XCTAssertEqual(b.sum().item(Float.self), 5.058513641357422,
            accuracy: 0.10117027282714844)
        let result = less(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessEqual() {
        MLXRandom.seed(553)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.41794854402542114,
            accuracy: 0.008358970880508423)
        XCTAssertEqual(a.sum().item(Float.self), 5.015382289886475,
            accuracy: 0.1003076457977295)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.19319520890712738,
            accuracy: -0.0038639041781425476)
        XCTAssertEqual(b.sum().item(Float.self), -2.318342447280884,
            accuracy: -0.04636684894561768)
        let result = lessEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLogAddExp() {
        MLXRandom.seed(699)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.06386314332485199,
            accuracy: 0.0012772628664970398)
        XCTAssertEqual(a.sum().item(Float.self), 0.7663577198982239,
            accuracy: 0.015327154397964478)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.44176310300827026,
            accuracy: -0.008835262060165406)
        XCTAssertEqual(b.sum().item(Float.self), -5.301156997680664,
            accuracy: -0.10602313995361329)
        let result = logAddExp(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.7705571055412292,
            accuracy: 0.015411142110824585)
        XCTAssertEqual(result.sum().item(Float.self), 9.246685028076172,
            accuracy: 0.18493370056152345)
    }

    func testMatmul() {
        MLXRandom.seed(400)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [10, 8])
        XCTAssertEqual(a.shape, [10, 8])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.560379147529602,
            accuracy: 0.011207582950592042)
        XCTAssertEqual(a.sum().item(Float.self), 44.83032989501953,
            accuracy: 0.8966065979003907)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [8, 13])
        XCTAssertEqual(b.shape, [8, 13])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.4166308343410492,
            accuracy: 0.008332616686820985)
        XCTAssertEqual(b.sum().item(Float.self), 43.32960510253906,
            accuracy: 0.8665921020507813)
        let result = matmul(a, b)
        XCTAssertEqual(result.shape, [10, 13])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 1.8758766651153564,
            accuracy: 0.03751753330230713)
        XCTAssertEqual(result.sum().item(Float.self), 243.8639678955078,
            accuracy: 4.877279357910156)
    }

    func testMaximum() {
        MLXRandom.seed(857)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.5597882866859436,
            accuracy: -0.011195765733718872)
        XCTAssertEqual(a.sum().item(Float.self), -6.717459201812744,
            accuracy: -0.1343491840362549)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.16689209640026093,
            accuracy: 0.0033378419280052185)
        XCTAssertEqual(b.sum().item(Float.self), 2.0027050971984863,
            accuracy: 0.04005410194396973)
        let result = maximum(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3417151868343353,
            accuracy: 0.006834303736686706)
        XCTAssertEqual(result.sum().item(Float.self), 4.100582122802734,
            accuracy: 0.08201164245605469)
    }

    func testMinimum() {
        MLXRandom.seed(722)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.01978858932852745,
            accuracy: -0.00039577178657054904)
        XCTAssertEqual(a.sum().item(Float.self), -0.2374630719423294,
            accuracy: -0.004749261438846588)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.34027594327926636,
            accuracy: 0.006805518865585327)
        XCTAssertEqual(b.sum().item(Float.self), 4.083311080932617,
            accuracy: 0.08166622161865235)
        let result = minimum(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.3063547909259796,
            accuracy: -0.006127095818519592)
        XCTAssertEqual(result.sum().item(Float.self), -3.676257371902466,
            accuracy: -0.07352514743804932)
    }

    func testMultiply() {
        MLXRandom.seed(537)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.15274646878242493,
            accuracy: 0.0030549293756484985)
        XCTAssertEqual(a.sum().item(Float.self), 1.8329575061798096,
            accuracy: 0.03665915012359619)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.16062960028648376,
            accuracy: 0.003212592005729675)
        XCTAssertEqual(b.sum().item(Float.self), 1.9275552034378052,
            accuracy: 0.03855110406875611)
        let result = multiply(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.1341765820980072,
            accuracy: -0.002683531641960144)
        XCTAssertEqual(result.sum().item(Float.self), -1.6101188659667969,
            accuracy: -0.03220237731933594)
    }

    func testNotEqual() {
        MLXRandom.seed(282)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.016050420701503754,
            accuracy: -0.0003210084140300751)
        XCTAssertEqual(a.sum().item(Float.self), -0.19260503351688385,
            accuracy: -0.003852100670337677)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.2504279613494873,
            accuracy: 0.0050085592269897465)
        XCTAssertEqual(b.sum().item(Float.self), 3.0051355361938477,
            accuracy: 0.060102710723876955)
        let result = notEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testRemainder() {
        MLXRandom.seed(534)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.5144619941711426,
            accuracy: -0.010289239883422853)
        XCTAssertEqual(a.sum().item(Float.self), -6.173543453216553,
            accuracy: -0.12347086906433105)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), -0.15448352694511414,
            accuracy: -0.0030896705389022827)
        XCTAssertEqual(b.sum().item(Float.self), -1.8538023233413696,
            accuracy: -0.03707604646682739)
        let result = remainder(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.2596015930175781,
            accuracy: -0.005192031860351562)
        XCTAssertEqual(result.sum().item(Float.self), -3.1152191162109375,
            accuracy: -0.062304382324218754)
    }

    func testSubtract() {
        MLXRandom.seed(831)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.27154868841171265,
            accuracy: 0.005430973768234253)
        XCTAssertEqual(a.sum().item(Float.self), 3.2585840225219727,
            accuracy: 0.06517168045043946)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(b.mean().item(Float.self), 0.1420227438211441,
            accuracy: 0.0028404548764228823)
        XCTAssertEqual(b.sum().item(Float.self), 1.7042728662490845,
            accuracy: 0.03408545732498169)
        let result = subtract(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.12952594459056854,
            accuracy: 0.002590518891811371)
        XCTAssertEqual(result.sum().item(Float.self), 1.5543112754821777,
            accuracy: 0.031086225509643555)
    }

    func testQuantize() {
        MLXRandom.seed(241)
        let w = MLXRandom.uniform(0.0 ..< 1.0, [32, 256])
        let (wq, scales, biases) = quantized(w, bits: 8)
        XCTAssertEqual(wq.shape, [32, 64])
        XCTAssertEqual(wq.dtype, .uint32)
        XCTAssertEqual(wq.mean().item(Float.self), 1512617.0,
            accuracy: 30252.34)
        XCTAssertEqual(wq.sum().item(Float.self), 3097839510,
            accuracy: 61956790.2)

        XCTAssertEqual(scales.shape, [32, 4])
        XCTAssertEqual(scales.dtype, .float32)
        XCTAssertEqual(scales.mean().item(Float.self), 0.0038017292972654104,
            accuracy: 7.603458594530821e-05)
        XCTAssertEqual(scales.sum().item(Float.self), 0.48662135004997253,
            accuracy: 0.00973242700099945)

        XCTAssertEqual(biases.shape, [32, 4])
        XCTAssertEqual(biases.dtype, .float32)
        XCTAssertEqual(biases.mean().item(Float.self), 0.014969739131629467,
            accuracy: 0.00029939478263258935)
        XCTAssertEqual(biases.sum().item(Float.self), 1.9161266088485718,
            accuracy: 0.03832253217697144)

    }

    func testFft_() {
        MLXRandom.seed(869)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.49898672103881836,
            accuracy: 0.009979734420776367)
        XCTAssertEqual(r.sum().item(Float.self), 4989.8671875,
            accuracy: 99.79734375)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4985533654689789,
            accuracy: 0.009971067309379578)
        XCTAssertEqual(i.sum().item(Float.self), 4985.53369140625,
            accuracy: 99.710673828125)
        let c = r + i.asImaginary()
        let result = fft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.46522781252861023,
            accuracy: 0.009304556250572206)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4652.2783203125,
            accuracy: 93.04556640625)
        XCTAssertEqual(resultImaginary.shape, [100, 100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.49382880330085754,
            accuracy: 0.009876576066017152)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 4938.2880859375,
            accuracy: 98.76576171875)
    }

    func testFft_1() {
        MLXRandom.seed(220)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.49703681468963623,
            accuracy: 0.009940736293792725)
        XCTAssertEqual(r.sum().item(Float.self), 4970.3681640625,
            accuracy: 99.40736328125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49617284536361694,
            accuracy: 0.00992345690727234)
        XCTAssertEqual(i.sum().item(Float.self), 4961.728515625,
            accuracy: 99.2345703125)
        let c = r + i.asImaginary()
        let result = fft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 80])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.5186548233032227,
            accuracy: 0.010373096466064453)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4149.23828125,
            accuracy: 82.98476562500001)
        XCTAssertEqual(resultImaginary.shape, [100, 80])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.49386361241340637,
            accuracy: 0.009877272248268128)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 3950.90869140625,
            accuracy: 79.018173828125)
    }

    func testFft_2() {
        MLXRandom.seed(916)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4961331784725189,
            accuracy: 0.00992266356945038)
        XCTAssertEqual(r.sum().item(Float.self), 4961.33203125,
            accuracy: 99.226640625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49821561574935913,
            accuracy: 0.009964312314987183)
        XCTAssertEqual(i.sum().item(Float.self), 4982.15625,
            accuracy: 99.643125)
        let c = r + i.asImaginary()
        let result = fft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 120])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.4616168439388275,
            accuracy: 0.00923233687877655)
        XCTAssertEqual(resultReal.sum().item(Float.self), 5539.40234375,
            accuracy: 110.788046875)
        XCTAssertEqual(resultImaginary.shape, [100, 120])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.45072126388549805,
            accuracy: 0.00901442527770996)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 5408.6552734375,
            accuracy: 108.17310546875001)
    }

    func testFft_3() {
        MLXRandom.seed(695)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.497734934091568,
            accuracy: 0.00995469868183136)
        XCTAssertEqual(r.sum().item(Float.self), 4977.349609375,
            accuracy: 99.5469921875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5017335414886475,
            accuracy: 0.010034670829772949)
        XCTAssertEqual(i.sum().item(Float.self), 5017.33544921875,
            accuracy: 100.346708984375)
        let c = r + i.asImaginary()
        let result = fft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.5061290264129639,
            accuracy: 0.010122580528259277)
        XCTAssertEqual(resultReal.sum().item(Float.self), 5061.29052734375,
            accuracy: 101.225810546875)
        XCTAssertEqual(resultImaginary.shape, [100, 100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4449807107448578,
            accuracy: 0.008899614214897156)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 4449.80712890625,
            accuracy: 88.996142578125)
    }

    func testIfft_() {
        MLXRandom.seed(603)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.49448537826538086,
            accuracy: 0.009889707565307618)
        XCTAssertEqual(r.sum().item(Float.self), 49.44853973388672,
            accuracy: 0.9889707946777344)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5573599338531494,
            accuracy: 0.011147198677062988)
        XCTAssertEqual(i.sum().item(Float.self), 55.73599624633789,
            accuracy: 1.1147199249267579)
        let c = r + i.asImaginary()
        let result = ifft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.009103093296289444,
            accuracy: 0.00018206186592578888)
        XCTAssertEqual(resultReal.sum().item(Float.self), 0.9103093147277832,
            accuracy: 0.018206186294555664)
        XCTAssertEqual(resultImaginary.shape, [100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.001101400819607079,
            accuracy: 2.202801639214158e-05)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 0.11014008522033691,
            accuracy: 0.002202801704406738)
    }

    func testIfft_1() {
        MLXRandom.seed(845)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4823684096336365,
            accuracy: 0.00964736819267273)
        XCTAssertEqual(r.sum().item(Float.self), 48.23684310913086,
            accuracy: 0.9647368621826172)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.47583281993865967,
            accuracy: 0.009516656398773193)
        XCTAssertEqual(i.sum().item(Float.self), 47.583282470703125,
            accuracy: 0.9516656494140625)
        let c = r + i.asImaginary()
        let result = ifft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [80])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.008635956794023514,
            accuracy: 0.00017271913588047028)
        XCTAssertEqual(resultReal.sum().item(Float.self), 0.6908765435218811,
            accuracy: 0.013817530870437623)
        XCTAssertEqual(resultImaginary.shape, [80])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.0071121747605502605,
            accuracy: 0.00014224349521100522)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 0.568973958492279,
            accuracy: 0.011379479169845582)
    }

    func testIfft_2() {
        MLXRandom.seed(972)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.46860700845718384,
            accuracy: 0.009372140169143678)
        XCTAssertEqual(r.sum().item(Float.self), 46.86070251464844,
            accuracy: 0.9372140502929688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4761311113834381,
            accuracy: 0.009522622227668762)
        XCTAssertEqual(i.sum().item(Float.self), 47.61311340332031,
            accuracy: 0.9522622680664062)
        let c = r + i.asImaginary()
        let result = ifft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [120])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.0033360826782882214,
            accuracy: 6.672165356576443e-05)
        XCTAssertEqual(resultReal.sum().item(Float.self), 0.4003298878669739,
            accuracy: 0.008006597757339478)
        XCTAssertEqual(resultImaginary.shape, [120])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.00022756408725399524,
            accuracy: 4.551281745079905e-06)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 0.02730768918991089,
            accuracy: 0.0005461537837982178)
    }

    func testIfft_3() {
        MLXRandom.seed(429)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4427134692668915,
            accuracy: 0.008854269385337829)
        XCTAssertEqual(r.sum().item(Float.self), 44.27134704589844,
            accuracy: 0.8854269409179688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.46247541904449463,
            accuracy: 0.009249508380889893)
        XCTAssertEqual(i.sum().item(Float.self), 46.24754333496094,
            accuracy: 0.9249508666992188)
        let c = r + i.asImaginary()
        let result = ifft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.004011719953268766,
            accuracy: 8.023439906537533e-05)
        XCTAssertEqual(resultReal.sum().item(Float.self), 0.4011719822883606,
            accuracy: 0.008023439645767213)
        XCTAssertEqual(resultImaginary.shape, [100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.005859805271029472,
            accuracy: 0.00011719610542058945)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 0.5859805345535278,
            accuracy: 0.011719610691070557)
    }

    func testRfft_() {
        MLXRandom.seed(593)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4806605279445648,
            accuracy: 0.009613210558891297)
        XCTAssertEqual(r.sum().item(Float.self), 48.06605529785156,
            accuracy: 0.9613211059570312)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.48936721682548523,
            accuracy: 0.009787344336509705)
        XCTAssertEqual(i.sum().item(Float.self), 48.93672180175781,
            accuracy: 0.9787344360351563)
        let c = r + i.asImaginary()
        let result = rfft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [51])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 1.4419496059417725,
            accuracy: 0.02883899211883545)
        XCTAssertEqual(resultReal.sum().item(Float.self), 73.5394287109375,
            accuracy: 1.47078857421875)
        XCTAssertEqual(resultImaginary.shape, [51])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.2742384374141693,
            accuracy: 0.005484768748283387)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 13.986159324645996,
            accuracy: 0.27972318649291994)
    }

    func testRfft_1() {
        MLXRandom.seed(281)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.512880265712738,
            accuracy: 0.01025760531425476)
        XCTAssertEqual(r.sum().item(Float.self), 51.28802490234375,
            accuracy: 1.025760498046875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5312841534614563,
            accuracy: 0.010625683069229126)
        XCTAssertEqual(i.sum().item(Float.self), 53.12841796875,
            accuracy: 1.062568359375)
        let c = r + i.asImaginary()
        let result = rfft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [41])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 1.085523009300232,
            accuracy: 0.02171046018600464)
        XCTAssertEqual(resultReal.sum().item(Float.self), 44.50644302368164,
            accuracy: 0.8901288604736328)
        XCTAssertEqual(resultImaginary.shape, [41])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.05501865968108177,
            accuracy: 0.0011003731936216354)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 2.255765199661255,
            accuracy: 0.0451153039932251)
    }

    func testRfft_2() {
        MLXRandom.seed(461)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4627799987792969,
            accuracy: 0.009255599975585938)
        XCTAssertEqual(r.sum().item(Float.self), 46.27799987792969,
            accuracy: 0.9255599975585938)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5184644460678101,
            accuracy: 0.010369288921356202)
        XCTAssertEqual(i.sum().item(Float.self), 51.84644317626953,
            accuracy: 1.0369288635253906)
        let c = r + i.asImaginary()
        let result = rfft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [61])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 1.2384992837905884,
            accuracy: 0.02476998567581177)
        XCTAssertEqual(resultReal.sum().item(Float.self), 75.5484619140625,
            accuracy: 1.51096923828125)
        XCTAssertEqual(resultImaginary.shape, [61])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), -0.46380823850631714,
            accuracy: -0.009276164770126343)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), -28.29230499267578,
            accuracy: -0.5658460998535156)
    }

    func testRfft_3() {
        MLXRandom.seed(504)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.47210997343063354,
            accuracy: 0.009442199468612671)
        XCTAssertEqual(r.sum().item(Float.self), 47.21099853515625,
            accuracy: 0.944219970703125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4813127815723419,
            accuracy: 0.009626255631446838)
        XCTAssertEqual(i.sum().item(Float.self), 48.13127899169922,
            accuracy: 0.9626255798339844)
        let c = r + i.asImaginary()
        let result = rfft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [51])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.5036380290985107,
            accuracy: 0.010072760581970215)
        XCTAssertEqual(resultReal.sum().item(Float.self), 25.68553924560547,
            accuracy: 0.5137107849121094)
        XCTAssertEqual(resultImaginary.shape, [51])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4131971001625061,
            accuracy: 0.008263942003250122)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 21.07305145263672,
            accuracy: 0.42146102905273436)
    }

    func testIrfft_() {
        MLXRandom.seed(676)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4711613357067108,
            accuracy: 0.009423226714134217)
        XCTAssertEqual(r.sum().item(Float.self), 47.11613464355469,
            accuracy: 0.9423226928710937)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.47868087887763977,
            accuracy: 0.009573617577552795)
        XCTAssertEqual(i.sum().item(Float.self), 47.86808776855469,
            accuracy: 0.9573617553710938)
        let c = r + i.asImaginary()
        let result = irfft(c, stream: .cpu)
        XCTAssertEqual(result.shape, [198])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0004948826390318573,
            accuracy: 9.897652780637145e-06)
        XCTAssertEqual(result.sum().item(Float.self), 0.09798675775527954,
            accuracy: 0.001959735155105591)
    }

    func testIrfft_1() {
        MLXRandom.seed(656)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.476201593875885,
            accuracy: 0.0095240318775177)
        XCTAssertEqual(r.sum().item(Float.self), 47.62015914916992,
            accuracy: 0.9524031829833984)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5490368008613586,
            accuracy: 0.010980736017227172)
        XCTAssertEqual(i.sum().item(Float.self), 54.90367889404297,
            accuracy: 1.0980735778808595)
        let c = r + i.asImaginary()
        let result = irfft(c, n: 80, stream: .cpu)
        XCTAssertEqual(result.shape, [80])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0071747018955647945,
            accuracy: 0.0001434940379112959)
        XCTAssertEqual(result.sum().item(Float.self), 0.5739761590957642,
            accuracy: 0.011479523181915283)
    }

    func testIrfft_2() {
        MLXRandom.seed(717)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5386900305747986,
            accuracy: 0.010773800611495972)
        XCTAssertEqual(r.sum().item(Float.self), 53.86900329589844,
            accuracy: 1.0773800659179689)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4603566527366638,
            accuracy: 0.009207133054733276)
        XCTAssertEqual(i.sum().item(Float.self), 46.035667419433594,
            accuracy: 0.9207133483886719)
        let c = r + i.asImaginary()
        let result = irfft(c, n: 120, stream: .cpu)
        XCTAssertEqual(result.shape, [120])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0025687282904982567,
            accuracy: 5.137456580996514e-05)
        XCTAssertEqual(result.sum().item(Float.self), 0.3082473874092102,
            accuracy: 0.006164947748184204)
    }

    func testIrfft_3() {
        MLXRandom.seed(938)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5083585381507874,
            accuracy: 0.010167170763015747)
        XCTAssertEqual(r.sum().item(Float.self), 50.835853576660156,
            accuracy: 1.0167170715332032)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4999184012413025,
            accuracy: 0.00999836802482605)
        XCTAssertEqual(i.sum().item(Float.self), 49.99184036254883,
            accuracy: 0.9998368072509766)
        let c = r + i.asImaginary()
        let result = irfft(c, axis: 0, stream: .cpu)
        XCTAssertEqual(result.shape, [198])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.002080403733998537,
            accuracy: 4.160807467997074e-05)
        XCTAssertEqual(result.sum().item(Float.self), 0.4119199514389038,
            accuracy: 0.008238399028778076)
    }

    func testFft2_() {
        MLXRandom.seed(812)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.49497753381729126,
            accuracy: 0.009899550676345825)
        XCTAssertEqual(r.sum().item(Float.self), 253.42849731445312,
            accuracy: 5.068569946289062)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.48790931701660156,
            accuracy: 0.009758186340332032)
        XCTAssertEqual(i.sum().item(Float.self), 249.8095703125,
            accuracy: 4.99619140625)
        let c = r + i.asImaginary()
        let result = fft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.4430522322654724,
            accuracy: 0.008861044645309448)
        XCTAssertEqual(resultReal.sum().item(Float.self), 226.84274291992188,
            accuracy: 4.536854858398438)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.5499212145805359,
            accuracy: 0.010998424291610718)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 281.5596618652344,
            accuracy: 5.631193237304688)
    }

    func testFft2_1() {
        MLXRandom.seed(365)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5127536058425903,
            accuracy: 0.010255072116851807)
        XCTAssertEqual(r.sum().item(Float.self), 262.52984619140625,
            accuracy: 5.250596923828125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5092339515686035,
            accuracy: 0.01018467903137207)
        XCTAssertEqual(i.sum().item(Float.self), 260.727783203125,
            accuracy: 5.2145556640625)
        let c = r + i.asImaginary()
        let result = fft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.3378489017486572,
            accuracy: 0.0067569780349731445)
        XCTAssertEqual(resultReal.sum().item(Float.self), 32.433494567871094,
            accuracy: 0.6486698913574219)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4062994420528412,
            accuracy: 0.008125988841056824)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 39.00474548339844,
            accuracy: 0.7800949096679688)
    }

    func testFft2_2() {
        MLXRandom.seed(84)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5123671293258667,
            accuracy: 0.010247342586517334)
        XCTAssertEqual(r.sum().item(Float.self), 262.33197021484375,
            accuracy: 5.246639404296875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.502106249332428,
            accuracy: 0.01004212498664856)
        XCTAssertEqual(i.sum().item(Float.self), 257.0783996582031,
            accuracy: 5.141567993164062)
        let c = r + i.asImaginary()
        let result = fft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.5207626819610596,
            accuracy: 0.010415253639221191)
        XCTAssertEqual(resultReal.sum().item(Float.self), 266.6304931640625,
            accuracy: 5.33260986328125)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4760454297065735,
            accuracy: 0.00952090859413147)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 243.73526000976562,
            accuracy: 4.874705200195312)
    }

    func testFft2_3() {
        MLXRandom.seed(332)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4954897463321686,
            accuracy: 0.009909794926643371)
        XCTAssertEqual(r.sum().item(Float.self), 253.6907501220703,
            accuracy: 5.073815002441406)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5005261898040771,
            accuracy: 0.010010523796081543)
        XCTAssertEqual(i.sum().item(Float.self), 256.2694091796875,
            accuracy: 5.12538818359375)
        let c = r + i.asImaginary()
        let result = fft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.5536004304885864,
            accuracy: 0.01107200860977173)
        XCTAssertEqual(resultReal.sum().item(Float.self), 221.440185546875,
            accuracy: 4.4288037109375)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.658384382724762,
            accuracy: 0.01316768765449524)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 263.353759765625,
            accuracy: 5.2670751953125)
    }

    func testIfft2_() {
        MLXRandom.seed(627)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.48098403215408325,
            accuracy: 0.009619680643081665)
        XCTAssertEqual(r.sum().item(Float.self), 246.26382446289062,
            accuracy: 4.925276489257812)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49524593353271484,
            accuracy: 0.009904918670654296)
        XCTAssertEqual(i.sum().item(Float.self), 253.56591796875,
            accuracy: 5.071318359375)
        let c = r + i.asImaginary()
        let result = ifft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.006198027171194553,
            accuracy: 0.00012396054342389106)
        XCTAssertEqual(resultReal.sum().item(Float.self), 3.1733899116516113,
            accuracy: 0.06346779823303222)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.007202435284852982,
            accuracy: 0.00014404870569705963)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 3.6876468658447266,
            accuracy: 0.07375293731689453)
    }

    func testIfft2_1() {
        MLXRandom.seed(118)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4939275085926056,
            accuracy: 0.009878550171852112)
        XCTAssertEqual(r.sum().item(Float.self), 252.89088439941406,
            accuracy: 5.0578176879882815)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5031070709228516,
            accuracy: 0.010062141418457031)
        XCTAssertEqual(i.sum().item(Float.self), 257.5908203125,
            accuracy: 5.15181640625)
        let c = r + i.asImaginary()
        let result = ifft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.0496579185128212,
            accuracy: 0.0009931583702564239)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4.767159938812256,
            accuracy: 0.09534319877624511)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.035478584468364716,
            accuracy: 0.0007095716893672944)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 3.4059438705444336,
            accuracy: 0.06811887741088868)
    }

    func testIfft2_2() {
        MLXRandom.seed(498)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5009815096855164,
            accuracy: 0.010019630193710327)
        XCTAssertEqual(r.sum().item(Float.self), 256.5025329589844,
            accuracy: 5.1300506591796875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49243441224098206,
            accuracy: 0.009848688244819642)
        XCTAssertEqual(i.sum().item(Float.self), 252.1264190673828,
            accuracy: 5.0425283813476565)
        let c = r + i.asImaginary()
        let result = ifft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.010478660464286804,
            accuracy: 0.0002095732092857361)
        XCTAssertEqual(resultReal.sum().item(Float.self), 5.365074157714844,
            accuracy: 0.10730148315429688)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.005031844601035118,
            accuracy: 0.00010063689202070237)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 2.5763044357299805,
            accuracy: 0.05152608871459961)
    }

    func testIfft2_3() {
        MLXRandom.seed(601)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5043255686759949,
            accuracy: 0.010086511373519898)
        XCTAssertEqual(r.sum().item(Float.self), 258.2146911621094,
            accuracy: 5.164293823242188)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5282406806945801,
            accuracy: 0.010564813613891602)
        XCTAssertEqual(i.sum().item(Float.self), 270.459228515625,
            accuracy: 5.4091845703125)
        let c = r + i.asImaginary()
        let result = ifft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.01160472258925438,
            accuracy: 0.0002320944517850876)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4.6418890953063965,
            accuracy: 0.09283778190612793)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.0105382539331913,
            accuracy: 0.000210765078663826)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 4.215301513671875,
            accuracy: 0.0843060302734375)
    }

    func testFftn_() {
        MLXRandom.seed(645)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5046442151069641,
            accuracy: 0.010092884302139282)
        XCTAssertEqual(r.sum().item(Float.self), 258.3778381347656,
            accuracy: 5.1675567626953125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4897768199443817,
            accuracy: 0.009795536398887635)
        XCTAssertEqual(i.sum().item(Float.self), 250.76573181152344,
            accuracy: 5.015314636230469)
        let c = r + i.asImaginary()
        let result = fftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.3406478762626648,
            accuracy: 0.006812957525253296)
        XCTAssertEqual(resultReal.sum().item(Float.self), 174.41171264648438,
            accuracy: 3.4882342529296877)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.10801282525062561,
            accuracy: 0.0021602565050125124)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 55.30256652832031,
            accuracy: 1.1060513305664064)
    }

    func testFftn_1() {
        MLXRandom.seed(343)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4879269003868103,
            accuracy: 0.009758538007736206)
        XCTAssertEqual(r.sum().item(Float.self), 249.81857299804688,
            accuracy: 4.996371459960938)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49864500761032104,
            accuracy: 0.009972900152206421)
        XCTAssertEqual(i.sum().item(Float.self), 255.30624389648438,
            accuracy: 5.1061248779296875)
        let c = r + i.asImaginary()
        let result = fftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.47607600688934326,
            accuracy: 0.009521520137786866)
        XCTAssertEqual(resultReal.sum().item(Float.self), 45.70329666137695,
            accuracy: 0.914065933227539)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4268122613430023,
            accuracy: 0.008536245226860046)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 40.973976135253906,
            accuracy: 0.8194795227050782)
    }

    func testFftn_2() {
        MLXRandom.seed(865)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.506011962890625,
            accuracy: 0.0101202392578125)
        XCTAssertEqual(r.sum().item(Float.self), 259.078125,
            accuracy: 5.1815625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4955616891384125,
            accuracy: 0.00991123378276825)
        XCTAssertEqual(i.sum().item(Float.self), 253.7275848388672,
            accuracy: 5.074551696777344)
        let c = r + i.asImaginary()
        let result = fftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.3889971375465393,
            accuracy: 0.007779942750930786)
        XCTAssertEqual(resultReal.sum().item(Float.self), 199.16653442382812,
            accuracy: 3.9833306884765625)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.4737764000892639,
            accuracy: 0.009475528001785279)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 242.57351684570312,
            accuracy: 4.851470336914063)
    }

    func testFftn_3() {
        MLXRandom.seed(194)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.48457071185112,
            accuracy: 0.0096914142370224)
        XCTAssertEqual(r.sum().item(Float.self), 248.10020446777344,
            accuracy: 4.962004089355469)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4813538193702698,
            accuracy: 0.009627076387405396)
        XCTAssertEqual(i.sum().item(Float.self), 246.45315551757812,
            accuracy: 4.929063110351563)
        let c = r + i.asImaginary()
        let result = fftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.4991455674171448,
            accuracy: 0.009982911348342895)
        XCTAssertEqual(resultReal.sum().item(Float.self), 199.65823364257812,
            accuracy: 3.9931646728515626)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.5157737731933594,
            accuracy: 0.010315475463867187)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 206.3095245361328,
            accuracy: 4.1261904907226565)
    }

    func testIfftn_() {
        MLXRandom.seed(248)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.48458826541900635,
            accuracy: 0.009691765308380127)
        XCTAssertEqual(r.sum().item(Float.self), 248.10919189453125,
            accuracy: 4.962183837890625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5036082863807678,
            accuracy: 0.010072165727615356)
        XCTAssertEqual(i.sum().item(Float.self), 257.8474426269531,
            accuracy: 5.156948852539062)
        let c = r + i.asImaginary()
        let result = ifftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.0013018902391195297,
            accuracy: 2.6037804782390595e-05)
        XCTAssertEqual(resultReal.sum().item(Float.self), 0.6665678024291992,
            accuracy: 0.013331356048583985)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.001114223967306316,
            accuracy: 2.2284479346126318e-05)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 0.5704826712608337,
            accuracy: 0.011409653425216675)
    }

    func testIfftn_1() {
        MLXRandom.seed(16)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4910537600517273,
            accuracy: 0.009821075201034547)
        XCTAssertEqual(r.sum().item(Float.self), 251.41952514648438,
            accuracy: 5.028390502929688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4993511438369751,
            accuracy: 0.009987022876739502)
        XCTAssertEqual(i.sum().item(Float.self), 255.66778564453125,
            accuracy: 5.113355712890625)
        let c = r + i.asImaginary()
        let result = ifftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.03455181047320366,
            accuracy: 0.0006910362094640732)
        XCTAssertEqual(resultReal.sum().item(Float.self), 3.3169736862182617,
            accuracy: 0.06633947372436523)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.04623018205165863,
            accuracy: 0.0009246036410331726)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 4.4380974769592285,
            accuracy: 0.08876194953918458)
    }

    func testIfftn_2() {
        MLXRandom.seed(749)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5013963580131531,
            accuracy: 0.010027927160263062)
        XCTAssertEqual(r.sum().item(Float.self), 256.7149353027344,
            accuracy: 5.134298706054688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49108564853668213,
            accuracy: 0.009821712970733643)
        XCTAssertEqual(i.sum().item(Float.self), 251.43585205078125,
            accuracy: 5.028717041015625)
        let c = r + i.asImaginary()
        let result = ifftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.009729268029332161,
            accuracy: 0.00019458536058664322)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4.981385231018066,
            accuracy: 0.09962770462036133)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.006195453926920891,
            accuracy: 0.00012390907853841783)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 3.172072410583496,
            accuracy: 0.06344144821166993)
    }

    func testIfftn_3() {
        MLXRandom.seed(277)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5160338878631592,
            accuracy: 0.010320677757263183)
        XCTAssertEqual(r.sum().item(Float.self), 264.2093505859375,
            accuracy: 5.28418701171875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.48932191729545593,
            accuracy: 0.009786438345909119)
        XCTAssertEqual(i.sum().item(Float.self), 250.53282165527344,
            accuracy: 5.010656433105469)
        let c = r + i.asImaginary()
        let result = ifftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.010853717103600502,
            accuracy: 0.00021707434207201006)
        XCTAssertEqual(resultReal.sum().item(Float.self), 4.341486930847168,
            accuracy: 0.08682973861694336)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.011352523230016232,
            accuracy: 0.00022705046460032465)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 4.541009426116943,
            accuracy: 0.09082018852233886)
    }

    func testRfft2_() {
        MLXRandom.seed(119)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5159510970115662,
            accuracy: 0.010319021940231323)
        XCTAssertEqual(r.sum().item(Float.self), 264.1669616699219,
            accuracy: 5.283339233398437)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5054599046707153,
            accuracy: 0.010109198093414307)
        XCTAssertEqual(i.sum().item(Float.self), 258.79547119140625,
            accuracy: 5.175909423828125)
        let c = r + i.asImaginary()
        let result = rfft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.7667209506034851,
            accuracy: 0.015334419012069703)
        XCTAssertEqual(resultReal.sum().item(Float.self), 245.3507080078125,
            accuracy: 4.90701416015625)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), -0.1745600402355194,
            accuracy: -0.0034912008047103885)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), -55.85921096801758,
            accuracy: -1.1171842193603516)
    }

    func testRfft2_1() {
        MLXRandom.seed(722)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4949501156806946,
            accuracy: 0.009899002313613892)
        XCTAssertEqual(r.sum().item(Float.self), 253.41445922851562,
            accuracy: 5.068289184570313)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4984145760536194,
            accuracy: 0.009968291521072387)
        XCTAssertEqual(i.sum().item(Float.self), 255.18826293945312,
            accuracy: 5.103765258789062)
        let c = r + i.asImaginary()
        let result = rfft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 3])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.7137078046798706,
            accuracy: 0.014274156093597412)
        XCTAssertEqual(resultReal.sum().item(Float.self), 51.386962890625,
            accuracy: 1.0277392578125)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 3])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.01423428300768137,
            accuracy: 0.0002846856601536274)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 1.024868369102478,
            accuracy: 0.02049736738204956)
    }

    func testRfft2_2() {
        MLXRandom.seed(225)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5058765411376953,
            accuracy: 0.010117530822753906)
        XCTAssertEqual(r.sum().item(Float.self), 259.0087890625,
            accuracy: 5.18017578125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4878406226634979,
            accuracy: 0.009756812453269958)
        XCTAssertEqual(i.sum().item(Float.self), 249.77439880371094,
            accuracy: 4.995487976074219)
        let c = r + i.asImaginary()
        let result = rfft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.6888449788093567,
            accuracy: 0.013776899576187135)
        XCTAssertEqual(resultReal.sum().item(Float.self), 220.43038940429688,
            accuracy: 4.408607788085938)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.04995536431670189,
            accuracy: 0.0009991072863340378)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 15.985715866088867,
            accuracy: 0.31971431732177735)
    }

    func testRfft2_3() {
        MLXRandom.seed(380)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4951004981994629,
            accuracy: 0.009902009963989258)
        XCTAssertEqual(r.sum().item(Float.self), 253.491455078125,
            accuracy: 5.0698291015625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4919356107711792,
            accuracy: 0.009838712215423585)
        XCTAssertEqual(i.sum().item(Float.self), 251.87103271484375,
            accuracy: 5.037420654296875)
        let c = r + i.asImaginary()
        let result = rfft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.7202292084693909,
            accuracy: 0.014404584169387818)
        XCTAssertEqual(resultReal.sum().item(Float.self), 172.85499572753906,
            accuracy: 3.4570999145507812)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.07359541952610016,
            accuracy: 0.0014719083905220033)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 17.662899017333984,
            accuracy: 0.3532579803466797)
    }

    func testIrfft2_() {
        MLXRandom.seed(813)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.4799543023109436,
            accuracy: 0.009599086046218872)
        XCTAssertEqual(r.sum().item(Float.self), 245.73660278320312,
            accuracy: 4.914732055664063)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4987284541130066,
            accuracy: 0.009974569082260132)
        XCTAssertEqual(i.sum().item(Float.self), 255.34896850585938,
            accuracy: 5.1069793701171875)
        let c = r + i.asImaginary()
        let result = irfft2(c, stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.004433207679539919,
            accuracy: 8.866415359079838e-05)
        XCTAssertEqual(result.sum().item(Float.self), 3.972153902053833,
            accuracy: 0.07944307804107666)
    }

    func testIrfft2_1() {
        MLXRandom.seed(174)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.514319121837616,
            accuracy: 0.01028638243675232)
        XCTAssertEqual(r.sum().item(Float.self), 263.3313903808594,
            accuracy: 5.266627807617188)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5133156776428223,
            accuracy: 0.010266313552856446)
        XCTAssertEqual(i.sum().item(Float.self), 262.817626953125,
            accuracy: 5.2563525390625)
        let c = r + i.asImaginary()
        let result = irfft2(c, s: [3, 4], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.05568484589457512,
            accuracy: 0.0011136969178915023)
        XCTAssertEqual(result.sum().item(Float.self), 5.345745086669922,
            accuracy: 0.10691490173339845)
    }

    func testIrfft2_2() {
        MLXRandom.seed(340)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5179769992828369,
            accuracy: 0.010359539985656738)
        XCTAssertEqual(r.sum().item(Float.self), 265.2042236328125,
            accuracy: 5.30408447265625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5126595497131348,
            accuracy: 0.010253190994262695)
        XCTAssertEqual(i.sum().item(Float.self), 262.481689453125,
            accuracy: 5.2496337890625)
        let c = r + i.asImaginary()
        let result = irfft2(c, axes: [0, 2], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.00403842655941844,
            accuracy: 8.07685311883688e-05)
        XCTAssertEqual(result.sum().item(Float.self), 3.6184298992156982,
            accuracy: 0.07236859798431397)
    }

    func testIrfft2_3() {
        MLXRandom.seed(436)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5037882328033447,
            accuracy: 0.010075764656066894)
        XCTAssertEqual(r.sum().item(Float.self), 257.9395751953125,
            accuracy: 5.15879150390625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5085217356681824,
            accuracy: 0.010170434713363648)
        XCTAssertEqual(i.sum().item(Float.self), 260.3631286621094,
            accuracy: 5.207262573242188)
        let c = r + i.asImaginary()
        let result = irfft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 5, 10])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.01129558403044939,
            accuracy: 0.00022591168060898781)
        XCTAssertEqual(result.sum().item(Float.self), 4.518233776092529,
            accuracy: 0.09036467552185058)
    }

    func testRfftn_() {
        MLXRandom.seed(835)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.507753849029541,
            accuracy: 0.010155076980590821)
        XCTAssertEqual(r.sum().item(Float.self), 259.969970703125,
            accuracy: 5.1993994140625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49466848373413086,
            accuracy: 0.009893369674682618)
        XCTAssertEqual(i.sum().item(Float.self), 253.270263671875,
            accuracy: 5.0654052734375)
        let c = r + i.asImaginary()
        let result = rfftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.9688063859939575,
            accuracy: 0.01937612771987915)
        XCTAssertEqual(resultReal.sum().item(Float.self), 310.0180358886719,
            accuracy: 6.200360717773438)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.1087944433093071,
            accuracy: 0.002175888866186142)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 34.8142204284668,
            accuracy: 0.6962844085693359)
    }

    func testRfftn_1() {
        MLXRandom.seed(63)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5128694772720337,
            accuracy: 0.010257389545440674)
        XCTAssertEqual(r.sum().item(Float.self), 262.58917236328125,
            accuracy: 5.251783447265625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4861868619918823,
            accuracy: 0.009723737239837646)
        XCTAssertEqual(i.sum().item(Float.self), 248.92767333984375,
            accuracy: 4.978553466796875)
        let c = r + i.asImaginary()
        let result = rfftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 3])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.46335750818252563,
            accuracy: 0.009267150163650513)
        XCTAssertEqual(resultReal.sum().item(Float.self), 33.36174011230469,
            accuracy: 0.6672348022460938)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 3])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), -0.007272897753864527,
            accuracy: -0.00014545795507729054)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), -0.5236486196517944,
            accuracy: -0.010472972393035889)
    }

    func testRfftn_2() {
        MLXRandom.seed(103)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5262448787689209,
            accuracy: 0.010524897575378419)
        XCTAssertEqual(r.sum().item(Float.self), 269.4373779296875,
            accuracy: 5.38874755859375)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4829203188419342,
            accuracy: 0.009658406376838685)
        XCTAssertEqual(i.sum().item(Float.self), 247.2552032470703,
            accuracy: 4.945104064941407)
        let c = r + i.asImaginary()
        let result = rfftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.8185403943061829,
            accuracy: 0.016370807886123658)
        XCTAssertEqual(resultReal.sum().item(Float.self), 261.93292236328125,
            accuracy: 5.2386584472656255)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), 0.12567834556102753,
            accuracy: 0.0025135669112205505)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), 40.217071533203125,
            accuracy: 0.8043414306640625)
    }

    func testRfftn_3() {
        MLXRandom.seed(801)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.50965815782547,
            accuracy: 0.010193163156509399)
        XCTAssertEqual(r.sum().item(Float.self), 260.9449768066406,
            accuracy: 5.218899536132812)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5044752955436707,
            accuracy: 0.010089505910873414)
        XCTAssertEqual(i.sum().item(Float.self), 258.2913513183594,
            accuracy: 5.165827026367188)
        let c = r + i.asImaginary()
        let result = rfftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(resultReal.mean().item(Float.self), 0.907656192779541,
            accuracy: 0.01815312385559082)
        XCTAssertEqual(resultReal.sum().item(Float.self), 217.8374786376953,
            accuracy: 4.356749572753906)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(resultImaginary.mean().item(Float.self), -0.0713878720998764,
            accuracy: -0.0014277574419975282)
        XCTAssertEqual(resultImaginary.sum().item(Float.self), -17.133089065551758,
            accuracy: -0.34266178131103514)
    }

    func testIrfftn_() {
        MLXRandom.seed(149)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5064899921417236,
            accuracy: 0.010129799842834472)
        XCTAssertEqual(r.sum().item(Float.self), 259.3228759765625,
            accuracy: 5.18645751953125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.4949530363082886,
            accuracy: 0.009899060726165771)
        XCTAssertEqual(i.sum().item(Float.self), 253.41595458984375,
            accuracy: 5.068319091796875)
        let c = r + i.asImaginary()
        let result = irfftn(c, stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.00016006881196517497,
            accuracy: 3.2013762393034994e-06)
        XCTAssertEqual(result.sum().item(Float.self), 0.14342164993286133,
            accuracy: 0.0028684329986572265)
    }

    func testIrfftn_1() {
        MLXRandom.seed(875)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5080322623252869,
            accuracy: 0.010160645246505737)
        XCTAssertEqual(r.sum().item(Float.self), 260.1125183105469,
            accuracy: 5.202250366210937)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5002621412277222,
            accuracy: 0.010005242824554443)
        XCTAssertEqual(i.sum().item(Float.self), 256.13421630859375,
            accuracy: 5.122684326171875)
        let c = r + i.asImaginary()
        let result = irfftn(c, s: [3, 4], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.03406701982021332,
            accuracy: 0.0006813403964042664)
        XCTAssertEqual(result.sum().item(Float.self), 3.2704339027404785,
            accuracy: 0.06540867805480957)
    }

    func testIrfftn_2() {
        MLXRandom.seed(714)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.49393296241760254,
            accuracy: 0.00987865924835205)
        XCTAssertEqual(r.sum().item(Float.self), 252.8936767578125,
            accuracy: 5.05787353515625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.5138311386108398,
            accuracy: 0.010276622772216797)
        XCTAssertEqual(i.sum().item(Float.self), 263.08154296875,
            accuracy: 5.261630859375)
        let c = r + i.asImaginary()
        let result = irfftn(c, axes: [0, 2], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0031077044550329447,
            accuracy: 6.21540891006589e-05)
        XCTAssertEqual(result.sum().item(Float.self), 2.7845029830932617,
            accuracy: 0.055690059661865236)
    }

    func testIrfftn_3() {
        MLXRandom.seed(224)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(r.mean().item(Float.self), 0.5111634731292725,
            accuracy: 0.01022326946258545)
        XCTAssertEqual(r.sum().item(Float.self), 261.7156982421875,
            accuracy: 5.23431396484375)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(i.mean().item(Float.self), 0.49477437138557434,
            accuracy: 0.009895487427711487)
        XCTAssertEqual(i.sum().item(Float.self), 253.32447814941406,
            accuracy: 5.066489562988282)
        let c = r + i.asImaginary()
        let result = irfftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 5, 10])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.01100881863385439,
            accuracy: 0.0002201763726770878)
        XCTAssertEqual(result.sum().item(Float.self), 4.403527736663818,
            accuracy: 0.08807055473327637)
    }

    func testSGD() {
        MLXRandom.seed(46)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.04528568685054779,
            accuracy: 0.0009057137370109558)
        XCTAssertEqual(a.sum().item(Float.self), 0.5434282422065735,
            accuracy: 0.01086856484413147)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), -0.3039197623729706,
            accuracy: -0.006078395247459412)
        XCTAssertEqual(aGrad.sum().item(Float.self), -3.6470370292663574,
            accuracy: -0.07294074058532715)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.07567766308784485,
            accuracy: 0.001513553261756897)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 0.9081318974494934,
            accuracy: 0.018162637948989868)
    }

    func testSGD1() {
        MLXRandom.seed(836)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.07495629787445068,
            accuracy: 0.0014991259574890137)
        XCTAssertEqual(a.sum().item(Float.self), 0.8994755148887634,
            accuracy: 0.01798951029777527)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.09326401352882385,
            accuracy: 0.001865280270576477)
        XCTAssertEqual(aGrad.sum().item(Float.self), 1.1191681623458862,
            accuracy: 0.022383363246917726)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1, momentum: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.06562991440296173,
            accuracy: 0.0013125982880592346)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 0.787558913230896,
            accuracy: 0.01575117826461792)
    }

    func testSGD2() {
        MLXRandom.seed(587)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.10747849941253662,
            accuracy: -0.0021495699882507326)
        XCTAssertEqual(a.sum().item(Float.self), -1.2897419929504395,
            accuracy: -0.02579483985900879)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), -0.32190611958503723,
            accuracy: -0.006438122391700745)
        XCTAssertEqual(aGrad.sum().item(Float.self), -3.8628733158111572,
            accuracy: -0.07725746631622314)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1, momentum: 0.1, dampening: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.07528789341449738,
            accuracy: -0.0015057578682899475)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -0.9034546613693237,
            accuracy: -0.018069093227386476)
    }

    func testRMSprop() {
        MLXRandom.seed(649)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.7766839861869812,
            accuracy: 0.015533679723739624)
        XCTAssertEqual(a.sum().item(Float.self), 9.320207595825195,
            accuracy: 0.18640415191650392)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.06737084686756134,
            accuracy: 0.0013474169373512267)
        XCTAssertEqual(aGrad.sum().item(Float.self), 0.8084501028060913,
            accuracy: 0.016169002056121828)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = RMSprop(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.7766839265823364,
            accuracy: 0.015533678531646729)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 9.320206642150879,
            accuracy: 0.18640413284301757)
    }

    func testAdagrad() {
        MLXRandom.seed(931)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.22450898587703705,
            accuracy: -0.004490179717540741)
        XCTAssertEqual(a.sum().item(Float.self), -2.6941077709198,
            accuracy: -0.053882155418396)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.24865484237670898,
            accuracy: 0.00497309684753418)
        XCTAssertEqual(aGrad.sum().item(Float.self), 2.983858108520508,
            accuracy: 0.05967716217041016)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdaGrad(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.22450897097587585,
            accuracy: -0.0044901794195175175)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -2.6941075325012207,
            accuracy: -0.05388215065002441)
    }

    func testAdaDelta() {
        MLXRandom.seed(958)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.04584333300590515,
            accuracy: -0.0009168666601181031)
        XCTAssertEqual(a.sum().item(Float.self), -0.5501199960708618,
            accuracy: -0.011002399921417237)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.23250393569469452,
            accuracy: 0.00465007871389389)
        XCTAssertEqual(aGrad.sum().item(Float.self), 2.7900471687316895,
            accuracy: 0.05580094337463379)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdaDelta(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.04589603468775749,
            accuracy: -0.0009179206937551498)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -0.5507524013519287,
            accuracy: -0.011015048027038574)
    }

    func testAdam() {
        MLXRandom.seed(547)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3483370244503021,
            accuracy: -0.006966740489006043)
        XCTAssertEqual(a.sum().item(Float.self), -4.180044174194336,
            accuracy: -0.08360088348388672)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.5226783752441406,
            accuracy: 0.010453567504882813)
        XCTAssertEqual(aGrad.sum().item(Float.self), 6.272140026092529,
            accuracy: 0.12544280052185058)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adam(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.3816703259944916,
            accuracy: -0.007633406519889831)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -4.580043792724609,
            accuracy: -0.09160087585449218)
    }

    func testAdamW() {
        MLXRandom.seed(616)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.1122930571436882,
            accuracy: 0.002245861142873764)
        XCTAssertEqual(a.sum().item(Float.self), 1.347516655921936,
            accuracy: 0.02695033311843872)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.305597722530365,
            accuracy: 0.0061119544506073)
        XCTAssertEqual(aGrad.sum().item(Float.self), 3.66717267036438,
            accuracy: 0.0733434534072876)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdamW(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.11218076944351196,
            accuracy: 0.0022436153888702394)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 1.3461692333221436,
            accuracy: 0.02692338466644287)
    }

    func testAdamax() {
        MLXRandom.seed(696)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3633918762207031,
            accuracy: -0.007267837524414063)
        XCTAssertEqual(a.sum().item(Float.self), -4.3607025146484375,
            accuracy: -0.08721405029296875)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.22175447642803192,
            accuracy: 0.0044350895285606385)
        XCTAssertEqual(aGrad.sum().item(Float.self), 2.6610536575317383,
            accuracy: 0.05322107315063477)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adamax(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.36672520637512207,
            accuracy: -0.007334504127502441)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -4.400702476501465,
            accuracy: -0.0880140495300293)
    }

    func testLion() {
        MLXRandom.seed(75)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.3039236068725586,
            accuracy: -0.006078472137451172)
        XCTAssertEqual(a.sum().item(Float.self), -3.647083282470703,
            accuracy: -0.07294166564941407)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), -0.24271723628044128,
            accuracy: -0.004854344725608826)
        XCTAssertEqual(aGrad.sum().item(Float.self), -2.912606716156006,
            accuracy: -0.05825213432312012)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Lion(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.303923636674881,
            accuracy: -0.00607847273349762)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -3.6470835208892822,
            accuracy: -0.07294167041778564)
    }

    func testLion1() {
        MLXRandom.seed(27)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.1776922345161438,
            accuracy: 0.003553844690322876)
        XCTAssertEqual(a.sum().item(Float.self), 2.1323068141937256,
            accuracy: 0.042646136283874515)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), -0.02118723653256893,
            accuracy: -0.00042374473065137863)
        XCTAssertEqual(aGrad.sum().item(Float.self), -0.2542468309402466,
            accuracy: -0.005084936618804932)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Lion(learningRate: 0.1, weightDecay: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.2092486470937729,
            accuracy: 0.004184972941875458)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 2.51098370552063,
            accuracy: 0.0502196741104126)
    }

    func testAdafactor() {
        MLXRandom.seed(127)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.18461060523986816,
            accuracy: -0.0036922121047973633)
        XCTAssertEqual(a.sum().item(Float.self), -2.215327262878418,
            accuracy: -0.04430654525756836)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), -0.03600400686264038,
            accuracy: -0.0007200801372528076)
        XCTAssertEqual(aGrad.sum().item(Float.self), -0.43204808235168457,
            accuracy: -0.008640961647033691)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.1855461299419403,
            accuracy: -0.0037109225988388064)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -2.226553440093994,
            accuracy: -0.04453106880187988)
    }

    func testAdafactor1() {
        MLXRandom.seed(650)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), -0.5207136869430542,
            accuracy: -0.010414273738861083)
        XCTAssertEqual(a.sum().item(Float.self), -6.248563766479492,
            accuracy: -0.12497127532958985)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.4333036541938782,
            accuracy: 0.008666073083877564)
        XCTAssertEqual(aGrad.sum().item(Float.self), 5.199643611907959,
            accuracy: 0.10399287223815919)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1, beta1: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), -0.526216983795166,
            accuracy: -0.01052433967590332)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), -6.314603805541992,
            accuracy: -0.12629207611083984)
    }

    func testAdafactor2() {
        MLXRandom.seed(193)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [10])
        XCTAssertEqual(a.shape, [10])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4277171194553375,
            accuracy: 0.008554342389106752)
        XCTAssertEqual(a.sum().item(Float.self), 4.2771711349487305,
            accuracy: 0.08554342269897461)
        let aGrad = MLXRandom.uniform(0.0 ..< 1.0, [10])
        XCTAssertEqual(aGrad.shape, [10])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(aGrad.mean().item(Float.self), 0.5291318297386169,
            accuracy: 0.010582636594772338)
        XCTAssertEqual(aGrad.sum().item(Float.self), 5.291317939758301,
            accuracy: 0.10582635879516601)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [10])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(result[unwrapping: "a"]!.mean().item(Float.self), 0.4227916896343231,
            accuracy: 0.008455833792686463)
        XCTAssertEqual(result[unwrapping: "a"]!.sum().item(Float.self), 4.227916717529297,
            accuracy: 0.08455833435058593)
    }

    func testGLU() {
        MLXRandom.seed(620)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4667481780052185,
            accuracy: 0.00933496356010437)
        XCTAssertEqual(a.sum().item(Float.self), 119.48753356933594,
            accuracy: 2.389750671386719)
        let result = GLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.2931130528450012,
            accuracy: 0.005862261056900024)
        XCTAssertEqual(result.sum().item(Float.self), 37.518470764160156,
            accuracy: 0.7503694152832031)
    }

    func testSigmoid1() {
        MLXRandom.seed(850)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5472526550292969,
            accuracy: 0.010945053100585937)
        XCTAssertEqual(a.sum().item(Float.self), 140.0966796875,
            accuracy: 2.80193359375)
        let result = Sigmoid()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.6309544444084167,
            accuracy: 0.012619088888168335)
        XCTAssertEqual(result.sum().item(Float.self), 161.5243377685547,
            accuracy: 3.2304867553710936)
    }

    func testMish() {
        MLXRandom.seed(589)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5296978950500488,
            accuracy: 0.010593957901000976)
        XCTAssertEqual(a.sum().item(Float.self), 135.6026611328125,
            accuracy: 2.71205322265625)
        let result = Mish()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.4196430444717407,
            accuracy: 0.008392860889434814)
        XCTAssertEqual(result.sum().item(Float.self), 107.42861938476562,
            accuracy: 2.1485723876953124)
    }

    func testReLU() {
        MLXRandom.seed(122)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5017197728157043,
            accuracy: 0.010034395456314087)
        XCTAssertEqual(a.sum().item(Float.self), 128.4402618408203,
            accuracy: 2.5688052368164063)
        let result = ReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5017197728157043,
            accuracy: 0.010034395456314087)
        XCTAssertEqual(result.sum().item(Float.self), 128.4402618408203,
            accuracy: 2.5688052368164063)
    }

    func testLeakyReLU() {
        MLXRandom.seed(400)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.47832274436950684,
            accuracy: 0.009566454887390137)
        XCTAssertEqual(a.sum().item(Float.self), 122.45062255859375,
            accuracy: 2.449012451171875)
        let result = LeakyReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.47832274436950684,
            accuracy: 0.009566454887390137)
        XCTAssertEqual(result.sum().item(Float.self), 122.45062255859375,
            accuracy: 2.449012451171875)
    }

    func testReLU6() {
        MLXRandom.seed(93)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4999306797981262,
            accuracy: 0.009998613595962524)
        XCTAssertEqual(a.sum().item(Float.self), 127.98225402832031,
            accuracy: 2.559645080566406)
        let result = ReLU6()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.4999306797981262,
            accuracy: 0.009998613595962524)
        XCTAssertEqual(result.sum().item(Float.self), 127.98225402832031,
            accuracy: 2.559645080566406)
    }

    func testSoftmax() {
        MLXRandom.seed(379)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49325865507125854,
            accuracy: 0.009865173101425172)
        XCTAssertEqual(a.sum().item(Float.self), 126.27421569824219,
            accuracy: 2.525484313964844)
        let result = SoftMax()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.0625,
            accuracy: 0.00125)
        XCTAssertEqual(result.sum().item(Float.self), 16.0,
            accuracy: 0.32)
    }

    func testSoftplus() {
        MLXRandom.seed(853)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5143963098526001,
            accuracy: 0.010287926197052003)
        XCTAssertEqual(a.sum().item(Float.self), 131.68545532226562,
            accuracy: 2.6337091064453126)
        let result = SoftPlus()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.9923473596572876,
            accuracy: 0.019846947193145753)
        XCTAssertEqual(result.sum().item(Float.self), 254.04092407226562,
            accuracy: 5.080818481445313)
    }

    func testSoftsign() {
        MLXRandom.seed(118)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49898141622543335,
            accuracy: 0.009979628324508667)
        XCTAssertEqual(a.sum().item(Float.self), 127.73924255371094,
            accuracy: 2.554784851074219)
        let result = SoftSign()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.3073887825012207,
            accuracy: 0.006147775650024414)
        XCTAssertEqual(result.sum().item(Float.self), 78.6915283203125,
            accuracy: 1.57383056640625)
    }

    func testCELU() {
        MLXRandom.seed(37)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5065512657165527,
            accuracy: 0.010131025314331054)
        XCTAssertEqual(a.sum().item(Float.self), 129.6771240234375,
            accuracy: 2.59354248046875)
        let result = CELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5065512657165527,
            accuracy: 0.010131025314331054)
        XCTAssertEqual(result.sum().item(Float.self), 129.6771240234375,
            accuracy: 2.59354248046875)
    }

    func testSiLU() {
        MLXRandom.seed(620)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4667481780052185,
            accuracy: 0.00933496356010437)
        XCTAssertEqual(a.sum().item(Float.self), 119.48753356933594,
            accuracy: 2.389750671386719)
        let result = SiLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.30425208806991577,
            accuracy: 0.006085041761398315)
        XCTAssertEqual(result.sum().item(Float.self), 77.88853454589844,
            accuracy: 1.5577706909179687)
    }

    func testLogSoftmax() {
        MLXRandom.seed(22)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5029705762863159,
            accuracy: 0.010059411525726319)
        XCTAssertEqual(a.sum().item(Float.self), 128.76046752929688,
            accuracy: 2.5752093505859377)
        let result = LogSoftMax()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -2.8123879432678223,
            accuracy: -0.05624775886535645)
        XCTAssertEqual(result.sum().item(Float.self), -719.9713134765625,
            accuracy: -14.39942626953125)
    }

    func testLogSigmoid() {
        MLXRandom.seed(199)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.527843713760376,
            accuracy: 0.010556874275207519)
        XCTAssertEqual(a.sum().item(Float.self), 135.12799072265625,
            accuracy: 2.702559814453125)
        let result = LogSigmoid()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.473541796207428,
            accuracy: -0.00947083592414856)
        XCTAssertEqual(result.sum().item(Float.self), -121.22669982910156,
            accuracy: -2.4245339965820314)
    }

    func testPReLU() {
        MLXRandom.seed(984)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5109776854515076,
            accuracy: 0.010219553709030152)
        XCTAssertEqual(a.sum().item(Float.self), 130.81028747558594,
            accuracy: 2.616205749511719)
        let result = PReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5109776854515076,
            accuracy: 0.010219553709030152)
        XCTAssertEqual(result.sum().item(Float.self), 130.81028747558594,
            accuracy: 2.616205749511719)
    }

    func testGELU() {
        MLXRandom.seed(993)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49665144085884094,
            accuracy: 0.00993302881717682)
        XCTAssertEqual(a.sum().item(Float.self), 127.14276885986328,
            accuracy: 2.5428553771972657)
        let result = GELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.36863499879837036,
            accuracy: 0.0073726999759674075)
        XCTAssertEqual(result.sum().item(Float.self), 94.37055969238281,
            accuracy: 1.8874111938476563)
    }

    func testTanh1() {
        MLXRandom.seed(189)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49295032024383545,
            accuracy: 0.009859006404876709)
        XCTAssertEqual(a.sum().item(Float.self), 126.19528198242188,
            accuracy: 2.5239056396484374)
        let result = Tanh()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.42792606353759766,
            accuracy: 0.008558521270751953)
        XCTAssertEqual(result.sum().item(Float.self), 109.549072265625,
            accuracy: 2.1909814453125)
    }

    func testHardswish() {
        MLXRandom.seed(735)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.47412270307540894,
            accuracy: 0.009482454061508178)
        XCTAssertEqual(a.sum().item(Float.self), 121.37541198730469,
            accuracy: 2.4275082397460936)
        let result = HardSwish()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.28867530822753906,
            accuracy: 0.005773506164550781)
        XCTAssertEqual(result.sum().item(Float.self), 73.90087890625,
            accuracy: 1.478017578125)
    }

    func testStep() {
        MLXRandom.seed(126)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4918924570083618,
            accuracy: 0.009837849140167236)
        XCTAssertEqual(a.sum().item(Float.self), 125.92446899414062,
            accuracy: 2.5184893798828125)
        let result = Step()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .int32)
        XCTAssertEqual(result.mean().item(Float.self), 1.0,
            accuracy: 0.02)
        XCTAssertEqual(result.sum().item(Float.self), 256,
            accuracy: 5.12)
    }

    func testSELU() {
        MLXRandom.seed(490)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4793606400489807,
            accuracy: 0.009587212800979614)
        XCTAssertEqual(a.sum().item(Float.self), 122.71632385253906,
            accuracy: 2.454326477050781)
        let result = SELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5036641359329224,
            accuracy: 0.010073282718658448)
        XCTAssertEqual(result.sum().item(Float.self), 128.93801879882812,
            accuracy: 2.5787603759765627)
    }

    func testLinear() {
        MLXRandom.seed(215)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4930267930030823,
            accuracy: 0.009860535860061645)
        XCTAssertEqual(a.sum().item(Float.self), 126.21485900878906,
            accuracy: 2.524297180175781)
        let result = Linear(16, 5)(a)
        XCTAssertEqual(result.shape, [2, 8, 5])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.20422397553920746,
            accuracy: 0.00408447951078415)
        XCTAssertEqual(result.sum().item(Float.self), 16.33791732788086,
            accuracy: 0.3267583465576172)
    }

    func testConv1d1() {
        MLXRandom.seed(744)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5086885690689087,
            accuracy: 0.010173771381378174)
        XCTAssertEqual(a.sum().item(Float.self), 130.22427368164062,
            accuracy: 2.6044854736328125)
        let result = Conv1d(inputChannels: 16, outputChannels: 2, kernelSize: 8)(a)
        XCTAssertEqual(result.shape, [2, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.05025433003902435,
            accuracy: 0.001005086600780487)
        XCTAssertEqual(result.sum().item(Float.self), 0.2010173201560974,
            accuracy: 0.004020346403121948)
    }

    func testConv2d1() {
        MLXRandom.seed(819)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49545639753341675,
            accuracy: 0.009909127950668336)
        XCTAssertEqual(a.sum().item(Float.self), 253.67367553710938,
            accuracy: 5.073473510742188)
        let result = Conv2d(inputChannels: 4, outputChannels: 2, kernelSize: 8)(a)
        XCTAssertEqual(result.shape, [2, 1, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), -0.5255705714225769,
            accuracy: -0.010511411428451538)
        XCTAssertEqual(result.sum().item(Float.self), -2.1022822856903076,
            accuracy: -0.04204564571380615)
    }

    func testDropout() {
        MLXRandom.seed(62)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.490646630525589,
            accuracy: 0.00981293261051178)
        XCTAssertEqual(a.sum().item(Float.self), 125.60553741455078,
            accuracy: 2.5121107482910157)
        let result = Dropout()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5042853355407715,
            accuracy: 0.01008570671081543)
        XCTAssertEqual(result.sum().item(Float.self), 129.0970458984375,
            accuracy: 2.5819409179687502)
    }

    func testDropout2d() {
        MLXRandom.seed(959)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5114291906356812,
            accuracy: 0.010228583812713623)
        XCTAssertEqual(a.sum().item(Float.self), 130.92587280273438,
            accuracy: 2.6185174560546876)
        let result = Dropout2d()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5483106374740601,
            accuracy: 0.0109662127494812)
        XCTAssertEqual(result.sum().item(Float.self), 140.36752319335938,
            accuracy: 2.8073504638671873)
    }

    func testDropout3d() {
        MLXRandom.seed(695)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.49696213006973267,
            accuracy: 0.009939242601394654)
        XCTAssertEqual(a.sum().item(Float.self), 254.44461059570312,
            accuracy: 5.088892211914063)
        let result = Dropout3d()(a)
        XCTAssertEqual(result.shape, [2, 8, 8, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.5081886053085327,
            accuracy: 0.010163772106170655)
        XCTAssertEqual(result.sum().item(Float.self), 260.19256591796875,
            accuracy: 5.2038513183593755)
    }

    func testEmbedding() {
        MLXRandom.seed(23)
        let a = MLXRandom.randInt(low: 0, high: 10, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .int32)
        XCTAssertEqual(a.mean().item(Float.self), 4.50390625,
            accuracy: 0.090078125)
        XCTAssertEqual(a.sum().item(Float.self), 2306,
            accuracy: 46.12)
        let result = Embedding(embeddingCount: 10, dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 8, 4, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.060480039566755295,
            accuracy: 0.0012096007913351059)
        XCTAssertEqual(result.sum().item(Float.self), 247.7262420654297,
            accuracy: 4.954524841308594)
    }

    func testInstanceNorm() {
        MLXRandom.seed(557)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4883057475090027,
            accuracy: 0.009766114950180054)
        XCTAssertEqual(a.sum().item(Float.self), 125.00627136230469,
            accuracy: 2.5001254272460938)
        let result = InstanceNorm(dimensions: 8)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.027962476015090942,
            accuracy: 0.0005592495203018188)
        XCTAssertEqual(result.sum().item(Float.self), 0.4473996162414551,
            accuracy: 0.008947992324829101)
    }

    func testLayerNorm() {
        MLXRandom.seed(435)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5000646114349365,
            accuracy: 0.01000129222869873)
        XCTAssertEqual(a.sum().item(Float.self), 128.01654052734375,
            accuracy: 2.560330810546875)
        let result = LayerNorm(dimensions: 16)(a)[0, axis: -1]
        XCTAssertEqual(result.shape, [2, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.06166763976216316,
            accuracy: 0.0012333527952432632)
        XCTAssertEqual(result.sum().item(Float.self), 0.9866822361946106,
            accuracy: 0.01973364472389221)
    }

    func testRMSNorm() {
        MLXRandom.seed(635)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.4926903247833252,
            accuracy: 0.009853806495666504)
        XCTAssertEqual(a.sum().item(Float.self), 126.12872314453125,
            accuracy: 2.522574462890625)
        let result = RMSNorm(dimensions: 16)(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.856640100479126,
            accuracy: 0.01713280200958252)
        XCTAssertEqual(result.sum().item(Float.self), 219.29986572265625,
            accuracy: 4.3859973144531255)
    }

    func testGroupNorm() {
        MLXRandom.seed(103)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5054763555526733,
            accuracy: 0.010109527111053467)
        XCTAssertEqual(a.sum().item(Float.self), 129.40194702148438,
            accuracy: 2.5880389404296875)
        let result = GroupNorm(groupCount: 4, dimensions: 16)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.24117237329483032,
            accuracy: 0.004823447465896607)
        XCTAssertEqual(result.sum().item(Float.self), 3.858757972717285,
            accuracy: 0.07717515945434571)
    }

    func testBatchNorm() {
        MLXRandom.seed(855)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.48666587471961975,
            accuracy: 0.009733317494392395)
        XCTAssertEqual(a.sum().item(Float.self), 124.58646392822266,
            accuracy: 2.491729278564453)
        let result = BatchNorm(featureCount: 16)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.004223518073558807,
            accuracy: 8.447036147117615e-05)
        XCTAssertEqual(result.sum().item(Float.self), 0.06757628917694092,
            accuracy: 0.0013515257835388184)
    }

    func testRoPE() {
        MLXRandom.seed(266)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5058146715164185,
            accuracy: 0.010116293430328369)
        XCTAssertEqual(a.sum().item(Float.self), 129.48855590820312,
            accuracy: 2.5897711181640624)
        let result = RoPE(dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.4610366225242615,
            accuracy: 0.00922073245048523)
        XCTAssertEqual(result.sum().item(Float.self), 118.02537536621094,
            accuracy: 2.3605075073242188)
    }

    func testSinusoidalPositionalEncoding() {
        MLXRandom.seed(71)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(a.mean().item(Float.self), 0.5082664489746094,
            accuracy: 0.010165328979492188)
        XCTAssertEqual(a.sum().item(Float.self), 130.1162109375,
            accuracy: 2.60232421875)
        let result = SinusoidalPositionalEncoding(dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 16, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(result.mean().item(Float.self), 0.27050766348838806,
            accuracy: 0.005410153269767761)
        XCTAssertEqual(result.sum().item(Float.self), 553.9996948242188,
            accuracy: 11.079993896484375)
    }

}

